
trapezoidal_velocity.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a44  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08005bcc  08005bcc  00015bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c2c  08005c2c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005c2c  08005c2c  00015c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c34  08005c34  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c34  08005c34  00015c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c38  08005c38  00015c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005c3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000240  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002b8  200002b8  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ff78  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024ed  00000000  00000000  00030020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d78  00000000  00000000  00032510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c70  00000000  00000000  00033288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000223a0  00000000  00000000  00033ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011353  00000000  00000000  00056298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbfae  00000000  00000000  000675eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00133599  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a74  00000000  00000000  001335ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005bb4 	.word	0x08005bb4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	08005bb4 	.word	0x08005bb4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b974 	b.w	8000d14 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468e      	mov	lr, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d14d      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	4694      	mov	ip, r2
 8000a56:	d969      	bls.n	8000b2c <__udivmoddi4+0xe8>
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	b152      	cbz	r2, 8000a74 <__udivmoddi4+0x30>
 8000a5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a62:	f1c2 0120 	rsb	r1, r2, #32
 8000a66:	fa20 f101 	lsr.w	r1, r0, r1
 8000a6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a72:	4094      	lsls	r4, r2
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	0c21      	lsrs	r1, r4, #16
 8000a7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a7e:	fa1f f78c 	uxth.w	r7, ip
 8000a82:	fb08 e316 	mls	r3, r8, r6, lr
 8000a86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a8a:	fb06 f107 	mul.w	r1, r6, r7
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a9a:	f080 811f 	bcs.w	8000cdc <__udivmoddi4+0x298>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 811c 	bls.w	8000cdc <__udivmoddi4+0x298>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab8:	fb00 f707 	mul.w	r7, r0, r7
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	d90a      	bls.n	8000ad6 <__udivmoddi4+0x92>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac8:	f080 810a 	bcs.w	8000ce0 <__udivmoddi4+0x29c>
 8000acc:	42a7      	cmp	r7, r4
 8000ace:	f240 8107 	bls.w	8000ce0 <__udivmoddi4+0x29c>
 8000ad2:	4464      	add	r4, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	1be4      	subs	r4, r4, r7
 8000adc:	2600      	movs	r6, #0
 8000ade:	b11d      	cbz	r5, 8000ae8 <__udivmoddi4+0xa4>
 8000ae0:	40d4      	lsrs	r4, r2
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d909      	bls.n	8000b06 <__udivmoddi4+0xc2>
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	f000 80ef 	beq.w	8000cd6 <__udivmoddi4+0x292>
 8000af8:	2600      	movs	r6, #0
 8000afa:	e9c5 0100 	strd	r0, r1, [r5]
 8000afe:	4630      	mov	r0, r6
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	fab3 f683 	clz	r6, r3
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d14a      	bne.n	8000ba4 <__udivmoddi4+0x160>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xd4>
 8000b12:	4282      	cmp	r2, r0
 8000b14:	f200 80f9 	bhi.w	8000d0a <__udivmoddi4+0x2c6>
 8000b18:	1a84      	subs	r4, r0, r2
 8000b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	469e      	mov	lr, r3
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d0e0      	beq.n	8000ae8 <__udivmoddi4+0xa4>
 8000b26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b2a:	e7dd      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000b2c:	b902      	cbnz	r2, 8000b30 <__udivmoddi4+0xec>
 8000b2e:	deff      	udf	#255	; 0xff
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	f040 8092 	bne.w	8000c5e <__udivmoddi4+0x21a>
 8000b3a:	eba1 010c 	sub.w	r1, r1, ip
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f fe8c 	uxth.w	lr, ip
 8000b46:	2601      	movs	r6, #1
 8000b48:	0c20      	lsrs	r0, r4, #16
 8000b4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b56:	fb0e f003 	mul.w	r0, lr, r3
 8000b5a:	4288      	cmp	r0, r1
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x12c>
 8000b5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x12a>
 8000b68:	4288      	cmp	r0, r1
 8000b6a:	f200 80cb 	bhi.w	8000d04 <__udivmoddi4+0x2c0>
 8000b6e:	4643      	mov	r3, r8
 8000b70:	1a09      	subs	r1, r1, r0
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b78:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b80:	fb0e fe00 	mul.w	lr, lr, r0
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x156>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x154>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f200 80bb 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b98:	4608      	mov	r0, r1
 8000b9a:	eba4 040e 	sub.w	r4, r4, lr
 8000b9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x9a>
 8000ba4:	f1c6 0720 	rsb	r7, r6, #32
 8000ba8:	40b3      	lsls	r3, r6
 8000baa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bba:	431c      	orrs	r4, r3
 8000bbc:	40f9      	lsrs	r1, r7
 8000bbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bca:	0c20      	lsrs	r0, r4, #16
 8000bcc:	fa1f fe8c 	uxth.w	lr, ip
 8000bd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bdc:	4288      	cmp	r0, r1
 8000bde:	fa02 f206 	lsl.w	r2, r2, r6
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b8>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bec:	f080 8088 	bcs.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f240 8085 	bls.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfa:	4461      	add	r1, ip
 8000bfc:	1a09      	subs	r1, r1, r0
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c04:	fb09 1110 	mls	r1, r9, r0, r1
 8000c08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	458e      	cmp	lr, r1
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1e2>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1c:	d26c      	bcs.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c1e:	458e      	cmp	lr, r1
 8000c20:	d96a      	bls.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4461      	add	r1, ip
 8000c26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c2e:	eba1 010e 	sub.w	r1, r1, lr
 8000c32:	42a1      	cmp	r1, r4
 8000c34:	46c8      	mov	r8, r9
 8000c36:	46a6      	mov	lr, r4
 8000c38:	d356      	bcc.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c3a:	d053      	beq.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x212>
 8000c3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c42:	eb61 010e 	sbc.w	r1, r1, lr
 8000c46:	fa01 f707 	lsl.w	r7, r1, r7
 8000c4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c4e:	40f1      	lsrs	r1, r6
 8000c50:	431f      	orrs	r7, r3
 8000c52:	e9c5 7100 	strd	r7, r1, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	f1c2 0320 	rsb	r3, r2, #32
 8000c62:	40d8      	lsrs	r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4301      	orrs	r1, r0
 8000c70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c80:	0c0b      	lsrs	r3, r1, #16
 8000c82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c86:	fb00 f60e 	mul.w	r6, r0, lr
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x260>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c9a:	d22f      	bcs.n	8000cfc <__udivmoddi4+0x2b8>
 8000c9c:	429e      	cmp	r6, r3
 8000c9e:	d92d      	bls.n	8000cfc <__udivmoddi4+0x2b8>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	b289      	uxth	r1, r1
 8000ca8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cac:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x28a>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cc4:	d216      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d914      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cca:	3e02      	subs	r6, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	1ac9      	subs	r1, r1, r3
 8000cd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cd4:	e738      	b.n	8000b48 <__udivmoddi4+0x104>
 8000cd6:	462e      	mov	r6, r5
 8000cd8:	4628      	mov	r0, r5
 8000cda:	e705      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000cdc:	4606      	mov	r6, r0
 8000cde:	e6e3      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	e6f8      	b.n	8000ad6 <__udivmoddi4+0x92>
 8000ce4:	454b      	cmp	r3, r9
 8000ce6:	d2a9      	bcs.n	8000c3c <__udivmoddi4+0x1f8>
 8000ce8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	e7a3      	b.n	8000c3c <__udivmoddi4+0x1f8>
 8000cf4:	4646      	mov	r6, r8
 8000cf6:	e7ea      	b.n	8000cce <__udivmoddi4+0x28a>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	e794      	b.n	8000c26 <__udivmoddi4+0x1e2>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	e7d1      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000d00:	46d0      	mov	r8, sl
 8000d02:	e77b      	b.n	8000bfc <__udivmoddi4+0x1b8>
 8000d04:	3b02      	subs	r3, #2
 8000d06:	4461      	add	r1, ip
 8000d08:	e732      	b.n	8000b70 <__udivmoddi4+0x12c>
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	e709      	b.n	8000b22 <__udivmoddi4+0xde>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e742      	b.n	8000b9a <__udivmoddi4+0x156>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <MX_GPIO_Init+0x4c>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a0f      	ldr	r2, [pc, #60]	; (8000d64 <MX_GPIO_Init+0x4c>)
 8000d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <MX_GPIO_Init+0x4c>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	603b      	str	r3, [r7, #0]
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MX_GPIO_Init+0x4c>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <MX_GPIO_Init+0x4c>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_GPIO_Init+0x4c>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]

}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40023800 	.word	0x40023800

08000d68 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 8000d6c:	f001 fbec 	bl	8002548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d70:	f000 f90a 	bl	8000f88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d74:	f7ff ffd0 	bl	8000d18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d78:	f001 fb42 	bl	8002400 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d7c:	f001 f974 	bl	8002068 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d80:	f001 f9d4 	bl	800212c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d84:	f001 fa26 	bl	80021d4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  SerialInit();
 8000d88:	f000 ffa0 	bl	8001ccc <SerialInit>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4866      	ldr	r0, [pc, #408]	; (8000f28 <main+0x1c0>)
 8000d90:	f002 fe62 	bl	8003a58 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 8000d94:	2104      	movs	r1, #4
 8000d96:	4864      	ldr	r0, [pc, #400]	; (8000f28 <main+0x1c0>)
 8000d98:	f002 fe5e 	bl	8003a58 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start_IT(&htim4);
 8000d9c:	4863      	ldr	r0, [pc, #396]	; (8000f2c <main+0x1c4>)
 8000d9e:	f002 fc2d 	bl	80035fc <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000da2:	2100      	movs	r1, #0
 8000da4:	4862      	ldr	r0, [pc, #392]	; (8000f30 <main+0x1c8>)
 8000da6:	f002 fce9 	bl	800377c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000daa:	2104      	movs	r1, #4
 8000dac:	4860      	ldr	r0, [pc, #384]	; (8000f30 <main+0x1c8>)
 8000dae:	f002 fce5 	bl	800377c <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (g_bDataAvailable == true) {
 8000db2:	4b60      	ldr	r3, [pc, #384]	; (8000f34 <main+0x1cc>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d059      	beq.n	8000e6e <main+0x106>
      if (StrCompare(g_strCommand, (uint8_t *)"SPID", 4)) {
 8000dba:	2204      	movs	r2, #4
 8000dbc:	495e      	ldr	r1, [pc, #376]	; (8000f38 <main+0x1d0>)
 8000dbe:	485f      	ldr	r0, [pc, #380]	; (8000f3c <main+0x1d4>)
 8000dc0:	f000 ff60 	bl	8001c84 <StrCompare>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <main+0x6a>
        process = SPID;
 8000dca:	4b5d      	ldr	r3, [pc, #372]	; (8000f40 <main+0x1d8>)
 8000dcc:	2202      	movs	r2, #2
 8000dce:	701a      	strb	r2, [r3, #0]
 8000dd0:	e04a      	b.n	8000e68 <main+0x100>
      } else if (StrCompare(g_strCommand, (uint8_t *)"VTUN", 4)) {
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	495b      	ldr	r1, [pc, #364]	; (8000f44 <main+0x1dc>)
 8000dd6:	4859      	ldr	r0, [pc, #356]	; (8000f3c <main+0x1d4>)
 8000dd8:	f000 ff54 	bl	8001c84 <StrCompare>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d003      	beq.n	8000dea <main+0x82>
        process = VTUN;
 8000de2:	4b57      	ldr	r3, [pc, #348]	; (8000f40 <main+0x1d8>)
 8000de4:	2203      	movs	r2, #3
 8000de6:	701a      	strb	r2, [r3, #0]
 8000de8:	e03e      	b.n	8000e68 <main+0x100>
      } else if (StrCompare(g_strCommand, (uint8_t *)"PTUN", 4)) {
 8000dea:	2204      	movs	r2, #4
 8000dec:	4956      	ldr	r1, [pc, #344]	; (8000f48 <main+0x1e0>)
 8000dee:	4853      	ldr	r0, [pc, #332]	; (8000f3c <main+0x1d4>)
 8000df0:	f000 ff48 	bl	8001c84 <StrCompare>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <main+0x9a>
        process = PTUN;
 8000dfa:	4b51      	ldr	r3, [pc, #324]	; (8000f40 <main+0x1d8>)
 8000dfc:	2204      	movs	r2, #4
 8000dfe:	701a      	strb	r2, [r3, #0]
 8000e00:	e032      	b.n	8000e68 <main+0x100>
      } else if (StrCompare(g_strCommand, (uint8_t *)"STOP", 4)) {
 8000e02:	2204      	movs	r2, #4
 8000e04:	4951      	ldr	r1, [pc, #324]	; (8000f4c <main+0x1e4>)
 8000e06:	484d      	ldr	r0, [pc, #308]	; (8000f3c <main+0x1d4>)
 8000e08:	f000 ff3c 	bl	8001c84 <StrCompare>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <main+0xb2>
        process = STOP;
 8000e12:	4b4b      	ldr	r3, [pc, #300]	; (8000f40 <main+0x1d8>)
 8000e14:	2205      	movs	r2, #5
 8000e16:	701a      	strb	r2, [r3, #0]
 8000e18:	e026      	b.n	8000e68 <main+0x100>
      } else if (StrCompare(g_strCommand, (uint8_t *)"MOVP", 4)) {
 8000e1a:	2204      	movs	r2, #4
 8000e1c:	494c      	ldr	r1, [pc, #304]	; (8000f50 <main+0x1e8>)
 8000e1e:	4847      	ldr	r0, [pc, #284]	; (8000f3c <main+0x1d4>)
 8000e20:	f000 ff30 	bl	8001c84 <StrCompare>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <main+0xca>
              process = MOVP;
 8000e2a:	4b45      	ldr	r3, [pc, #276]	; (8000f40 <main+0x1d8>)
 8000e2c:	2206      	movs	r2, #6
 8000e2e:	701a      	strb	r2, [r3, #0]
 8000e30:	e01a      	b.n	8000e68 <main+0x100>
      } else if (StrCompare(g_strCommand, (uint8_t *)"MOVV", 4)) {
 8000e32:	2204      	movs	r2, #4
 8000e34:	4947      	ldr	r1, [pc, #284]	; (8000f54 <main+0x1ec>)
 8000e36:	4841      	ldr	r0, [pc, #260]	; (8000f3c <main+0x1d4>)
 8000e38:	f000 ff24 	bl	8001c84 <StrCompare>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <main+0xe2>
              process = MOVV;
 8000e42:	4b3f      	ldr	r3, [pc, #252]	; (8000f40 <main+0x1d8>)
 8000e44:	2207      	movs	r2, #7
 8000e46:	701a      	strb	r2, [r3, #0]
 8000e48:	e00e      	b.n	8000e68 <main+0x100>
      } else if (StrCompare(g_strCommand, (uint8_t *)"SINF", 4)) {
 8000e4a:	2204      	movs	r2, #4
 8000e4c:	4942      	ldr	r1, [pc, #264]	; (8000f58 <main+0x1f0>)
 8000e4e:	483b      	ldr	r0, [pc, #236]	; (8000f3c <main+0x1d4>)
 8000e50:	f000 ff18 	bl	8001c84 <StrCompare>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <main+0xfa>
        process = SINF;
 8000e5a:	4b39      	ldr	r3, [pc, #228]	; (8000f40 <main+0x1d8>)
 8000e5c:	2208      	movs	r2, #8
 8000e5e:	701a      	strb	r2, [r3, #0]
 8000e60:	e002      	b.n	8000e68 <main+0x100>
      } else {
        process = NONE;
 8000e62:	4b37      	ldr	r3, [pc, #220]	; (8000f40 <main+0x1d8>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	701a      	strb	r2, [r3, #0]
      }
      g_bDataAvailable = false;
 8000e68:	4b32      	ldr	r3, [pc, #200]	; (8000f34 <main+0x1cc>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
    }
    switch (process) {
 8000e6e:	4b34      	ldr	r3, [pc, #208]	; (8000f40 <main+0x1d8>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	2b07      	cmp	r3, #7
 8000e76:	d89c      	bhi.n	8000db2 <main+0x4a>
 8000e78:	a201      	add	r2, pc, #4	; (adr r2, 8000e80 <main+0x118>)
 8000e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7e:	bf00      	nop
 8000e80:	08000ea1 	.word	0x08000ea1
 8000e84:	08000ea7 	.word	0x08000ea7
 8000e88:	08000db3 	.word	0x08000db3
 8000e8c:	08000db3 	.word	0x08000db3
 8000e90:	08000ed5 	.word	0x08000ed5
 8000e94:	08000db3 	.word	0x08000db3
 8000e98:	08000db3 	.word	0x08000db3
 8000e9c:	08000ef9 	.word	0x08000ef9
    case NONE:
      SerialAcceptReceive();
 8000ea0:	f000 ff22 	bl	8001ce8 <SerialAcceptReceive>
      break;
 8000ea4:	e03e      	b.n	8000f24 <main+0x1bc>
    case SPID:
      PIDReset(&pid);
 8000ea6:	482d      	ldr	r0, [pc, #180]	; (8000f5c <main+0x1f4>)
 8000ea8:	f000 fe0e 	bl	8001ac8 <PIDReset>

      // get parameter
      pid.dKp = (*(float *)g_kp);
 8000eac:	4b2c      	ldr	r3, [pc, #176]	; (8000f60 <main+0x1f8>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a2a      	ldr	r2, [pc, #168]	; (8000f5c <main+0x1f4>)
 8000eb2:	6013      	str	r3, [r2, #0]
      pid.dKi = (*(float *)g_ki);
 8000eb4:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <main+0x1fc>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a28      	ldr	r2, [pc, #160]	; (8000f5c <main+0x1f4>)
 8000eba:	6053      	str	r3, [r2, #4]
      pid.dKd = (*(float *)g_kd);
 8000ebc:	4b2a      	ldr	r3, [pc, #168]	; (8000f68 <main+0x200>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a26      	ldr	r2, [pc, #152]	; (8000f5c <main+0x1f4>)
 8000ec2:	6093      	str	r3, [r2, #8]

      // get setPoint
      motor.setPoint = (*(float *)g_Setpoint);
 8000ec4:	4b29      	ldr	r3, [pc, #164]	; (8000f6c <main+0x204>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a29      	ldr	r2, [pc, #164]	; (8000f70 <main+0x208>)
 8000eca:	61d3      	str	r3, [r2, #28]

      process = NONE;
 8000ecc:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <main+0x1d8>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	701a      	strb	r2, [r3, #0]
      break;
 8000ed2:	e027      	b.n	8000f24 <main+0x1bc>
    case PTUN:

      break;
    case STOP:

      PIDReset(&pid);
 8000ed4:	4821      	ldr	r0, [pc, #132]	; (8000f5c <main+0x1f4>)
 8000ed6:	f000 fdf7 	bl	8001ac8 <PIDReset>

      MotorReset(&motor);
 8000eda:	4825      	ldr	r0, [pc, #148]	; (8000f70 <main+0x208>)
 8000edc:	f000 f9db 	bl	8001296 <MotorReset>

      htim3.Instance->CNT = 0;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <main+0x1c0>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	625a      	str	r2, [r3, #36]	; 0x24
      MotorSetDuty(0, &htim2);
 8000ee8:	4911      	ldr	r1, [pc, #68]	; (8000f30 <main+0x1c8>)
 8000eea:	2000      	movs	r0, #0
 8000eec:	f000 fa08 	bl	8001300 <MotorSetDuty>

      process = NONE;
 8000ef0:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <main+0x1d8>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	701a      	strb	r2, [r3, #0]
      break;
 8000ef6:	e015      	b.n	8000f24 <main+0x1bc>
    case SINF:

      profile.dAccelMax = (*(float *)g_Amax);
 8000ef8:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <main+0x20c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a1e      	ldr	r2, [pc, #120]	; (8000f78 <main+0x210>)
 8000efe:	6013      	str	r3, [r2, #0]
      profile.dVelMax = (*(float *)g_Vmax);
 8000f00:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <main+0x214>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a1c      	ldr	r2, [pc, #112]	; (8000f78 <main+0x210>)
 8000f06:	6053      	str	r3, [r2, #4]
      profile.dPosMax = (*(float *)g_Position) / DEGREE;
 8000f08:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <main+0x218>)
 8000f0a:	ed93 7a00 	vldr	s14, [r3]
 8000f0e:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8000f84 <main+0x21c>
 8000f12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f16:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <main+0x210>)
 8000f18:	edc3 7a02 	vstr	s15, [r3, #8]

      MotorTrapzoidalInit(&profile);
 8000f1c:	4816      	ldr	r0, [pc, #88]	; (8000f78 <main+0x210>)
 8000f1e:	f000 fb29 	bl	8001574 <MotorTrapzoidalInit>
      break;
 8000f22:	bf00      	nop
    if (g_bDataAvailable == true) {
 8000f24:	e745      	b.n	8000db2 <main+0x4a>
 8000f26:	bf00      	nop
 8000f28:	200001d0 	.word	0x200001d0
 8000f2c:	20000218 	.word	0x20000218
 8000f30:	20000188 	.word	0x20000188
 8000f34:	20000180 	.word	0x20000180
 8000f38:	08005bcc 	.word	0x08005bcc
 8000f3c:	2000014c 	.word	0x2000014c
 8000f40:	200000dc 	.word	0x200000dc
 8000f44:	08005bd4 	.word	0x08005bd4
 8000f48:	08005bdc 	.word	0x08005bdc
 8000f4c:	08005be4 	.word	0x08005be4
 8000f50:	08005bec 	.word	0x08005bec
 8000f54:	08005bf4 	.word	0x08005bf4
 8000f58:	08005bfc 	.word	0x08005bfc
 8000f5c:	200000c4 	.word	0x200000c4
 8000f60:	20000164 	.word	0x20000164
 8000f64:	20000168 	.word	0x20000168
 8000f68:	2000016c 	.word	0x2000016c
 8000f6c:	20000170 	.word	0x20000170
 8000f70:	20000094 	.word	0x20000094
 8000f74:	20000178 	.word	0x20000178
 8000f78:	200000e0 	.word	0x200000e0
 8000f7c:	20000174 	.word	0x20000174
 8000f80:	2000017c 	.word	0x2000017c
 8000f84:	43b40000 	.word	0x43b40000

08000f88 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b094      	sub	sp, #80	; 0x50
 8000f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8e:	f107 0320 	add.w	r3, r7, #32
 8000f92:	2230      	movs	r2, #48	; 0x30
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f004 fd06 	bl	80059a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	4b28      	ldr	r3, [pc, #160]	; (8001054 <SystemClock_Config+0xcc>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	4a27      	ldr	r2, [pc, #156]	; (8001054 <SystemClock_Config+0xcc>)
 8000fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fba:	6413      	str	r3, [r2, #64]	; 0x40
 8000fbc:	4b25      	ldr	r3, [pc, #148]	; (8001054 <SystemClock_Config+0xcc>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fc8:	2300      	movs	r3, #0
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	4b22      	ldr	r3, [pc, #136]	; (8001058 <SystemClock_Config+0xd0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a21      	ldr	r2, [pc, #132]	; (8001058 <SystemClock_Config+0xd0>)
 8000fd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <SystemClock_Config+0xd0>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fec:	2310      	movs	r3, #16
 8000fee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ff8:	2308      	movs	r3, #8
 8000ffa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 150;
 8000ffc:	2396      	movs	r3, #150	; 0x96
 8000ffe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001000:	2302      	movs	r3, #2
 8001002:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001004:	2304      	movs	r3, #4
 8001006:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001008:	f107 0320 	add.w	r3, r7, #32
 800100c:	4618      	mov	r0, r3
 800100e:	f001 fe4d 	bl	8002cac <HAL_RCC_OscConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <SystemClock_Config+0x94>
    Error_Handler();
 8001018:	f000 f938 	bl	800128c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 800101c:	230f      	movs	r3, #15
 800101e:	60fb      	str	r3, [r7, #12]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001020:	2302      	movs	r3, #2
 8001022:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001028:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800102c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800102e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001032:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	2104      	movs	r1, #4
 800103a:	4618      	mov	r0, r3
 800103c:	f002 f8ae 	bl	800319c <HAL_RCC_ClockConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0xc2>
    Error_Handler();
 8001046:	f000 f921 	bl	800128c <Error_Handler>
  }
}
 800104a:	bf00      	nop
 800104c:	3750      	adds	r7, #80	; 0x50
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800
 8001058:	40007000 	.word	0x40007000

0800105c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

  if (htim->Instance == htim4.Instance) {
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b74      	ldr	r3, [pc, #464]	; (800123c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	f040 80de 	bne.w	800122e <HAL_TIM_PeriodElapsedCallback+0x1d2>

    switch (process) {
 8001072:	4b73      	ldr	r3, [pc, #460]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	3b01      	subs	r3, #1
 8001078:	2b07      	cmp	r3, #7
 800107a:	f200 80db 	bhi.w	8001234 <HAL_TIM_PeriodElapsedCallback+0x1d8>
 800107e:	a201      	add	r2, pc, #4	; (adr r2, 8001084 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001084:	08001233 	.word	0x08001233
 8001088:	08001233 	.word	0x08001233
 800108c:	080010a5 	.word	0x080010a5
 8001090:	080010ed 	.word	0x080010ed
 8001094:	08001233 	.word	0x08001233
 8001098:	08001133 	.word	0x08001133
 800109c:	080011b1 	.word	0x080011b1
 80010a0:	08001233 	.word	0x08001233
      break;
    case SPID:
      break;
    case VTUN:

      ReadEncoder(&motor, &htim3);
 80010a4:	4967      	ldr	r1, [pc, #412]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80010a6:	4868      	ldr	r0, [pc, #416]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80010a8:	f000 f95e 	bl	8001368 <ReadEncoder>

      MotorSetDuty((int)MotorTuningVelocity(&pid, &motor, motor.setPoint),
 80010ac:	4b66      	ldr	r3, [pc, #408]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80010ae:	edd3 7a07 	vldr	s15, [r3, #28]
 80010b2:	eeb0 0a67 	vmov.f32	s0, s15
 80010b6:	4964      	ldr	r1, [pc, #400]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80010b8:	4864      	ldr	r0, [pc, #400]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80010ba:	f000 fa17 	bl	80014ec <MotorTuningVelocity>
 80010be:	eef0 7a40 	vmov.f32	s15, s0
 80010c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010c6:	4962      	ldr	r1, [pc, #392]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80010c8:	ee17 0a90 	vmov	r0, s15
 80010cc:	f000 f918 	bl	8001300 <MotorSetDuty>
                   &htim2);

      g_vel1 = (uint8_t *)(&motor.velocity);
 80010d0:	4b60      	ldr	r3, [pc, #384]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80010d2:	4a61      	ldr	r2, [pc, #388]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80010d4:	601a      	str	r2, [r3, #0]

      memcpy(g_nTxData, g_vel1, 4);
 80010d6:	4b5f      	ldr	r3, [pc, #380]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	4b5f      	ldr	r3, [pc, #380]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x200>)
 80010e0:	601a      	str	r2, [r3, #0]

      // send data
      SerialWriteComm(g_strCommand, g_nTxData);
 80010e2:	495e      	ldr	r1, [pc, #376]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x200>)
 80010e4:	485e      	ldr	r0, [pc, #376]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80010e6:	f000 fe0d 	bl	8001d04 <SerialWriteComm>
      break;
 80010ea:	e0a3      	b.n	8001234 <HAL_TIM_PeriodElapsedCallback+0x1d8>

    case PTUN:

        ReadEncoder(&motor, &htim3);
 80010ec:	4955      	ldr	r1, [pc, #340]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80010ee:	4856      	ldr	r0, [pc, #344]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80010f0:	f000 f93a 	bl	8001368 <ReadEncoder>

        MotorSetDuty((int)MotorTuningPosition(&pid, &motor, motor.setPoint),
 80010f4:	4b54      	ldr	r3, [pc, #336]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80010f6:	edd3 7a07 	vldr	s15, [r3, #28]
 80010fa:	eeb0 0a67 	vmov.f32	s0, s15
 80010fe:	4952      	ldr	r1, [pc, #328]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001100:	4852      	ldr	r0, [pc, #328]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001102:	f000 fa15 	bl	8001530 <MotorTuningPosition>
 8001106:	eef0 7a40 	vmov.f32	s15, s0
 800110a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800110e:	4950      	ldr	r1, [pc, #320]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001110:	ee17 0a90 	vmov	r0, s15
 8001114:	f000 f8f4 	bl	8001300 <MotorSetDuty>
                     &htim2);

        g_pos1 = (uint8_t *)(&motor.position);
 8001118:	4b52      	ldr	r3, [pc, #328]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800111a:	4a53      	ldr	r2, [pc, #332]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800111c:	601a      	str	r2, [r3, #0]

        memcpy(g_nTxData + 8, g_pos1, 4);
 800111e:	4a53      	ldr	r2, [pc, #332]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001120:	4b50      	ldr	r3, [pc, #320]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6013      	str	r3, [r2, #0]

        // send data
        SerialWriteComm(g_strCommand, g_nTxData);
 8001128:	494c      	ldr	r1, [pc, #304]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x200>)
 800112a:	484d      	ldr	r0, [pc, #308]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800112c:	f000 fdea 	bl	8001d04 <SerialWriteComm>
      break;
 8001130:	e080      	b.n	8001234 <HAL_TIM_PeriodElapsedCallback+0x1d8>
    case STOP:
      break;
    case MOVP:
	      ReadEncoder(&motor, &htim3);
 8001132:	4944      	ldr	r1, [pc, #272]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001134:	4844      	ldr	r0, [pc, #272]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001136:	f000 f917 	bl	8001368 <ReadEncoder>
	      MotorMovePosP(&profile, &pid, &motor, &htim2);
 800113a:	4b45      	ldr	r3, [pc, #276]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800113c:	4a42      	ldr	r2, [pc, #264]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800113e:	4943      	ldr	r1, [pc, #268]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001140:	484b      	ldr	r0, [pc, #300]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001142:	f000 fbb9 	bl	80018b8 <MotorMovePosP>

	      g_vel1 = (uint8_t *)(&motor.velocity);
 8001146:	4b43      	ldr	r3, [pc, #268]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001148:	4a43      	ldr	r2, [pc, #268]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800114a:	601a      	str	r2, [r3, #0]
	      g_vel2 = (uint8_t *)(&motor.v_ref0);
 800114c:	4b49      	ldr	r3, [pc, #292]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800114e:	4a4a      	ldr	r2, [pc, #296]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001150:	601a      	str	r2, [r3, #0]
	      g_pos1 = (uint8_t *)(&motor.position);
 8001152:	4b44      	ldr	r3, [pc, #272]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001154:	4a44      	ldr	r2, [pc, #272]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001156:	601a      	str	r2, [r3, #0]
	      g_pos2 = (uint8_t *)(&motor.p_ref0);
 8001158:	4b48      	ldr	r3, [pc, #288]	; (800127c <HAL_TIM_PeriodElapsedCallback+0x220>)
 800115a:	4a49      	ldr	r2, [pc, #292]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800115c:	601a      	str	r2, [r3, #0]

	      memcpy(g_nTxData, g_vel1, 4);
 800115e:	4b3d      	ldr	r3, [pc, #244]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b3d      	ldr	r3, [pc, #244]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001168:	601a      	str	r2, [r3, #0]
	      memcpy(g_nTxData + 4, g_vel2, 4);
 800116a:	4a46      	ldr	r2, [pc, #280]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800116c:	4b41      	ldr	r3, [pc, #260]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6013      	str	r3, [r2, #0]
	      memcpy(g_nTxData + 8, g_pos1, 4);
 8001174:	4a3d      	ldr	r2, [pc, #244]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001176:	4b3b      	ldr	r3, [pc, #236]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6013      	str	r3, [r2, #0]
	      memcpy(g_nTxData + 12, g_pos2, 4);
 800117e:	4a42      	ldr	r2, [pc, #264]	; (8001288 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001180:	4b3e      	ldr	r3, [pc, #248]	; (800127c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6013      	str	r3, [r2, #0]

	      // send data
	      SerialWriteComm(g_strCommand, g_nTxData);
 8001188:	4934      	ldr	r1, [pc, #208]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x200>)
 800118a:	4835      	ldr	r0, [pc, #212]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800118c:	f000 fdba 	bl	8001d04 <SerialWriteComm>

	      if (profile.nTime > profile.dMidStep3) {
 8001190:	4b37      	ldr	r3, [pc, #220]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001192:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001196:	4b36      	ldr	r3, [pc, #216]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001198:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800119c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a4:	dc00      	bgt.n	80011a8 <HAL_TIM_PeriodElapsedCallback+0x14c>
	        process = STOP;
	      }
      break;
 80011a6:	e045      	b.n	8001234 <HAL_TIM_PeriodElapsedCallback+0x1d8>
	        process = STOP;
 80011a8:	4b25      	ldr	r3, [pc, #148]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80011aa:	2205      	movs	r2, #5
 80011ac:	701a      	strb	r2, [r3, #0]
      break;
 80011ae:	e041      	b.n	8001234 <HAL_TIM_PeriodElapsedCallback+0x1d8>
    case MOVV:
    	      ReadEncoder(&motor, &htim3);
 80011b0:	4924      	ldr	r1, [pc, #144]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80011b2:	4825      	ldr	r0, [pc, #148]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80011b4:	f000 f8d8 	bl	8001368 <ReadEncoder>
    	      MotorMovePosV(&profile, &pid, &motor, &htim2);
 80011b8:	4b25      	ldr	r3, [pc, #148]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80011ba:	4a23      	ldr	r2, [pc, #140]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80011bc:	4923      	ldr	r1, [pc, #140]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80011be:	482c      	ldr	r0, [pc, #176]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80011c0:	f000 fa7a 	bl	80016b8 <MotorMovePosV>

    	      g_vel1 = (uint8_t *)(&motor.velocity);
 80011c4:	4b23      	ldr	r3, [pc, #140]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80011c6:	4a24      	ldr	r2, [pc, #144]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80011c8:	601a      	str	r2, [r3, #0]
    	      g_vel2 = (uint8_t *)(&motor.v_ref0);
 80011ca:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80011cc:	4a2a      	ldr	r2, [pc, #168]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80011ce:	601a      	str	r2, [r3, #0]
    	      g_pos1 = (uint8_t *)(&motor.position);
 80011d0:	4b24      	ldr	r3, [pc, #144]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80011d2:	4a25      	ldr	r2, [pc, #148]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80011d4:	601a      	str	r2, [r3, #0]
    	      g_pos2 = (uint8_t *)(&motor.p_ref0);
 80011d6:	4b29      	ldr	r3, [pc, #164]	; (800127c <HAL_TIM_PeriodElapsedCallback+0x220>)
 80011d8:	4a29      	ldr	r2, [pc, #164]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80011da:	601a      	str	r2, [r3, #0]

    	      memcpy(g_nTxData, g_vel1, 4);
 80011dc:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	461a      	mov	r2, r3
 80011e4:	4b1d      	ldr	r3, [pc, #116]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x200>)
 80011e6:	601a      	str	r2, [r3, #0]
    	      memcpy(g_nTxData + 4, g_vel2, 4);
 80011e8:	4a26      	ldr	r2, [pc, #152]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80011ea:	4b22      	ldr	r3, [pc, #136]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6013      	str	r3, [r2, #0]
    	      memcpy(g_nTxData + 8, g_pos1, 4);
 80011f2:	4a1e      	ldr	r2, [pc, #120]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x210>)
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6013      	str	r3, [r2, #0]
    	      memcpy(g_nTxData + 12, g_pos2, 4);
 80011fc:	4a22      	ldr	r2, [pc, #136]	; (8001288 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80011fe:	4b1f      	ldr	r3, [pc, #124]	; (800127c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6013      	str	r3, [r2, #0]

    	      // send data
    	      SerialWriteComm(g_strCommand, g_nTxData);
 8001206:	4915      	ldr	r1, [pc, #84]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001208:	4815      	ldr	r0, [pc, #84]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800120a:	f000 fd7b 	bl	8001d04 <SerialWriteComm>

    	      if (profile.nTime > profile.dMidStep3) {
 800120e:	4b18      	ldr	r3, [pc, #96]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001210:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001214:	4b16      	ldr	r3, [pc, #88]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001216:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800121a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800121e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001222:	dc00      	bgt.n	8001226 <HAL_TIM_PeriodElapsedCallback+0x1ca>
    	        process = STOP;
    	      }
      break;
 8001224:	e006      	b.n	8001234 <HAL_TIM_PeriodElapsedCallback+0x1d8>
    	        process = STOP;
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001228:	2205      	movs	r2, #5
 800122a:	701a      	strb	r2, [r3, #0]
      break;
 800122c:	e002      	b.n	8001234 <HAL_TIM_PeriodElapsedCallback+0x1d8>
    case SINF:
      break;
    }
  }
 800122e:	bf00      	nop
 8001230:	e000      	b.n	8001234 <HAL_TIM_PeriodElapsedCallback+0x1d8>
      break;
 8001232:	bf00      	nop
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000218 	.word	0x20000218
 8001240:	200000dc 	.word	0x200000dc
 8001244:	200001d0 	.word	0x200001d0
 8001248:	20000094 	.word	0x20000094
 800124c:	200000c4 	.word	0x200000c4
 8001250:	20000188 	.word	0x20000188
 8001254:	20000124 	.word	0x20000124
 8001258:	200000a8 	.word	0x200000a8
 800125c:	20000114 	.word	0x20000114
 8001260:	2000014c 	.word	0x2000014c
 8001264:	20000128 	.word	0x20000128
 8001268:	200000ac 	.word	0x200000ac
 800126c:	2000011c 	.word	0x2000011c
 8001270:	200000e0 	.word	0x200000e0
 8001274:	2000012c 	.word	0x2000012c
 8001278:	200000c0 	.word	0x200000c0
 800127c:	20000130 	.word	0x20000130
 8001280:	200000bc 	.word	0x200000bc
 8001284:	20000118 	.word	0x20000118
 8001288:	20000120 	.word	0x20000120

0800128c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001290:	b672      	cpsid	i
}
 8001292:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001294:	e7fe      	b.n	8001294 <Error_Handler+0x8>

08001296 <MotorReset>:
#include <stdlib.h>
#include <string.h>



void MotorReset(Motor_t *tmotor) {
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
  tmotor->counter = 0;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	801a      	strh	r2, [r3, #0]
  tmotor->o_vel = 0;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	60da      	str	r2, [r3, #12]
  tmotor->o_vel2 = 0;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  tmotor->vel = 0;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  tmotor->velocity = 0;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	615a      	str	r2, [r3, #20]
  tmotor->position = 0;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f04f 0200 	mov.w	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  tmotor->v_ref = 0;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	625a      	str	r2, [r3, #36]	; 0x24
  tmotor->v_ref0 = 0;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	62da      	str	r2, [r3, #44]	; 0x2c
  tmotor->p_ref = 0;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	621a      	str	r2, [r3, #32]
  tmotor->p_ref0 = 0;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f04f 0200 	mov.w	r2, #0
 80012ea:	629a      	str	r2, [r3, #40]	; 0x28
  tmotor->rounds = 0;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	605a      	str	r2, [r3, #4]

}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <MotorSetDuty>:

// duty cycle of motor
void MotorSetDuty(int nDuty, TIM_HandleTypeDef *htim) {
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  if (nDuty == 0) {
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d108      	bne.n	8001322 <MotorSetDuty+0x22>
    htim->Instance->CCR1 = 0;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2200      	movs	r2, #0
 8001316:	635a      	str	r2, [r3, #52]	; 0x34
    htim->Instance->CCR2 = 0;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2200      	movs	r2, #0
 800131e:	639a      	str	r2, [r3, #56]	; 0x38
    htim->Instance->CCR2 = 0;
  } else if (nDuty < 0) {
    htim->Instance->CCR1 = 0;
    htim->Instance->CCR2 = abs(nDuty);
  }
}
 8001320:	e01a      	b.n	8001358 <MotorSetDuty+0x58>
  } else if (nDuty > 0) {
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	dd08      	ble.n	800133a <MotorSetDuty+0x3a>
    htim->Instance->CCR1 = nDuty;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	635a      	str	r2, [r3, #52]	; 0x34
    htim->Instance->CCR2 = 0;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2200      	movs	r2, #0
 8001336:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001338:	e00e      	b.n	8001358 <MotorSetDuty+0x58>
  } else if (nDuty < 0) {
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	da0b      	bge.n	8001358 <MotorSetDuty+0x58>
    htim->Instance->CCR1 = 0;
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2200      	movs	r2, #0
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
    htim->Instance->CCR2 = abs(nDuty);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800134e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	0000      	movs	r0, r0
	...

08001368 <ReadEncoder>:

void ReadEncoder(Motor_t *tmotor, TIM_HandleTypeDef *htim) {
 8001368:	b5b0      	push	{r4, r5, r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  tmotor->counter = htim->Instance->CNT;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001378:	b29a      	uxth	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	801a      	strh	r2, [r3, #0]
  int16_t temp_data = tmotor->counter;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	81fb      	strh	r3, [r7, #14]
  tmotor->rounds += temp_data / PPR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	ed93 7a01 	vldr	s14, [r3, #4]
 800138a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800138e:	4a54      	ldr	r2, [pc, #336]	; (80014e0 <ReadEncoder+0x178>)
 8001390:	fb82 1203 	smull	r1, r2, r2, r3
 8001394:	441a      	add	r2, r3
 8001396:	1312      	asrs	r2, r2, #12
 8001398:	17db      	asrs	r3, r3, #31
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	b21b      	sxth	r3, r3
 800139e:	ee07 3a90 	vmov	s15, r3
 80013a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	edc3 7a01 	vstr	s15, [r3, #4]
  tmotor->vel = (float)temp_data * (MINUTE / SAMPLING_TIME) / PPR; // RPM
 80013b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013bc:	ee17 0a90 	vmov	r0, s15
 80013c0:	f7ff f86e 	bl	80004a0 <__aeabi_f2d>
 80013c4:	a33c      	add	r3, pc, #240	; (adr r3, 80014b8 <ReadEncoder+0x150>)
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	f7ff f8c1 	bl	8000550 <__aeabi_dmul>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	a33a      	add	r3, pc, #232	; (adr r3, 80014c0 <ReadEncoder+0x158>)
 80013d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013dc:	f7ff f9e2 	bl	80007a4 <__aeabi_ddiv>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff fac4 	bl	8000974 <__aeabi_d2f>
 80013ec:	4602      	mov	r2, r0
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	609a      	str	r2, [r3, #8]
  tmotor->position += (float)temp_data * RTD; // degree
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	ed93 7a06 	vldr	s14, [r3, #24]
 80013f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013fc:	ee07 3a90 	vmov	s15, r3
 8001400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001404:	eddf 6a37 	vldr	s13, [pc, #220]	; 80014e4 <ReadEncoder+0x17c>
 8001408:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800140c:	ed9f 6a36 	vldr	s12, [pc, #216]	; 80014e8 <ReadEncoder+0x180>
 8001410:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	edc3 7a06 	vstr	s15, [r3, #24]

  // LPF
  tmotor->velocity =
      0.7 * tmotor->vel + 0.2 * tmotor->o_vel + 0.1 * tmotor->o_vel2;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff f83c 	bl	80004a0 <__aeabi_f2d>
 8001428:	a327      	add	r3, pc, #156	; (adr r3, 80014c8 <ReadEncoder+0x160>)
 800142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142e:	f7ff f88f 	bl	8000550 <__aeabi_dmul>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4614      	mov	r4, r2
 8001438:	461d      	mov	r5, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f82e 	bl	80004a0 <__aeabi_f2d>
 8001444:	a322      	add	r3, pc, #136	; (adr r3, 80014d0 <ReadEncoder+0x168>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	f7ff f881 	bl	8000550 <__aeabi_dmul>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4620      	mov	r0, r4
 8001454:	4629      	mov	r1, r5
 8001456:	f7fe fec5 	bl	80001e4 <__adddf3>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4614      	mov	r4, r2
 8001460:	461d      	mov	r5, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff f81a 	bl	80004a0 <__aeabi_f2d>
 800146c:	a31a      	add	r3, pc, #104	; (adr r3, 80014d8 <ReadEncoder+0x170>)
 800146e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001472:	f7ff f86d 	bl	8000550 <__aeabi_dmul>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4620      	mov	r0, r4
 800147c:	4629      	mov	r1, r5
 800147e:	f7fe feb1 	bl	80001e4 <__adddf3>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4610      	mov	r0, r2
 8001488:	4619      	mov	r1, r3
 800148a:	f7ff fa73 	bl	8000974 <__aeabi_d2f>
 800148e:	4602      	mov	r2, r0
  tmotor->velocity =
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	615a      	str	r2, [r3, #20]
  tmotor->o_vel2 = tmotor->o_vel;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	611a      	str	r2, [r3, #16]
  tmotor->o_vel = tmotor->vel;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	60da      	str	r2, [r3, #12]

  htim->Instance->CNT = 0;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2200      	movs	r2, #0
 80014aa:	625a      	str	r2, [r3, #36]	; 0x24
}
 80014ac:	bf00      	nop
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bdb0      	pop	{r4, r5, r7, pc}
 80014b4:	f3af 8000 	nop.w
 80014b8:	00000000 	.word	0x00000000
 80014bc:	40b77000 	.word	0x40b77000
 80014c0:	00000000 	.word	0x00000000
 80014c4:	40b9c800 	.word	0x40b9c800
 80014c8:	66666666 	.word	0x66666666
 80014cc:	3fe66666 	.word	0x3fe66666
 80014d0:	9999999a 	.word	0x9999999a
 80014d4:	3fc99999 	.word	0x3fc99999
 80014d8:	9999999a 	.word	0x9999999a
 80014dc:	3fb99999 	.word	0x3fb99999
 80014e0:	9ee009ef 	.word	0x9ee009ef
 80014e4:	43b40000 	.word	0x43b40000
 80014e8:	45ce4000 	.word	0x45ce4000

080014ec <MotorTuningVelocity>:

// Turning
float MotorTuningVelocity(PID_CONTROL_t *PIDControl, Motor_t *tmotor,
                          float velocity) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	ed87 0a01 	vstr	s0, [r7, #4]
  float SetPoint = velocity;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	61fb      	str	r3, [r7, #28]
  float Input = tmotor->velocity;
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	61bb      	str	r3, [r7, #24]
  float g_nDutyCycle = PIDCompute(PIDControl, SetPoint, Input, SAMPLING_TIME);
 8001504:	ed9f 1a09 	vldr	s2, [pc, #36]	; 800152c <MotorTuningVelocity+0x40>
 8001508:	edd7 0a06 	vldr	s1, [r7, #24]
 800150c:	ed97 0a07 	vldr	s0, [r7, #28]
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	f000 faef 	bl	8001af4 <PIDCompute>
 8001516:	ed87 0a05 	vstr	s0, [r7, #20]
  return g_nDutyCycle;
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	ee07 3a90 	vmov	s15, r3
}
 8001520:	eeb0 0a67 	vmov.f32	s0, s15
 8001524:	3720      	adds	r7, #32
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	3c23d70a 	.word	0x3c23d70a

08001530 <MotorTuningPosition>:
float MotorTuningPosition(PID_CONTROL_t *PIDControl, Motor_t *tmotor,
                          float position) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	ed87 0a01 	vstr	s0, [r7, #4]
  float SetPoint = position;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	61fb      	str	r3, [r7, #28]
  float Input = tmotor->position;
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	61bb      	str	r3, [r7, #24]
  float g_nDutyCycle = PIDCompute(PIDControl, SetPoint, Input, SAMPLING_TIME);
 8001548:	ed9f 1a09 	vldr	s2, [pc, #36]	; 8001570 <MotorTuningPosition+0x40>
 800154c:	edd7 0a06 	vldr	s1, [r7, #24]
 8001550:	ed97 0a07 	vldr	s0, [r7, #28]
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	f000 facd 	bl	8001af4 <PIDCompute>
 800155a:	ed87 0a05 	vstr	s0, [r7, #20]
  return g_nDutyCycle;
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	ee07 3a90 	vmov	s15, r3
}
 8001564:	eeb0 0a67 	vmov.f32	s0, s15
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	3c23d70a 	.word	0x3c23d70a

08001574 <MotorTrapzoidalInit>:

void MotorTrapzoidalInit(PROFILE_t *tProfile) {
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  //	tProfile->dAccelMax = maxAcc;
  //	tProfile->dVelMax = maxVel;
  //	tProfile->dPosMax = maxPos;

  tProfile->dA1 = 0.5f * tProfile->dAccelMax;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	edd3 7a00 	vldr	s15, [r3]
 8001582:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001586:	ee67 7a87 	vmul.f32	s15, s15, s14
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	edc3 7a03 	vstr	s15, [r3, #12]
  tProfile->dA2 = tProfile->dVelMax;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	611a      	str	r2, [r3, #16]
  tProfile->dB2 =
      -0.5f * tProfile->dVelMax * tProfile->dVelMax / tProfile->dAccelMax;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	edd3 7a01 	vldr	s15, [r3, #4]
 800159e:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80015a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80015ac:	ee67 6a27 	vmul.f32	s13, s14, s15
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	ed93 7a00 	vldr	s14, [r3]
 80015b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
  tProfile->dB2 =
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	edc3 7a05 	vstr	s15, [r3, #20]
  tProfile->dA3 = -0.5f * tProfile->dAccelMax;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	edd3 7a00 	vldr	s15, [r3]
 80015c6:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80015ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	edc3 7a06 	vstr	s15, [r3, #24]
  tProfile->dB3 = tProfile->dPosMax * tProfile->dAccelMax / tProfile->dVelMax +
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	ed93 7a02 	vldr	s14, [r3, #8]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	edd3 7a00 	vldr	s15, [r3]
 80015e0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80015ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  tProfile->dVelMax;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	edd3 7a01 	vldr	s15, [r3, #4]
  tProfile->dB3 = tProfile->dPosMax * tProfile->dAccelMax / tProfile->dVelMax +
 80015f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	edc3 7a07 	vstr	s15, [r3, #28]
  tProfile->dC3 =
      -0.5f * tProfile->dPosMax * tProfile->dPosMax * tProfile->dAccelMax /
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	edd3 7a02 	vldr	s15, [r3, #8]
 8001604:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001608:	ee27 7a87 	vmul.f32	s14, s15, s14
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001612:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	edd3 7a00 	vldr	s15, [r3]
 800161c:	ee67 6a27 	vmul.f32	s13, s14, s15
          (tProfile->dVelMax * tProfile->dVelMax) -
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	ed93 7a01 	vldr	s14, [r3, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	edd3 7a01 	vldr	s15, [r3, #4]
 800162c:	ee67 7a27 	vmul.f32	s15, s14, s15
      -0.5f * tProfile->dPosMax * tProfile->dPosMax * tProfile->dAccelMax /
 8001630:	ee86 7aa7 	vdiv.f32	s14, s13, s15
      0.5f * tProfile->dVelMax * tProfile->dVelMax / tProfile->dAccelMax;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	edd3 7a01 	vldr	s15, [r3, #4]
 800163a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800163e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	edd3 7a01 	vldr	s15, [r3, #4]
 8001648:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	edd3 6a00 	vldr	s13, [r3]
 8001652:	eec6 7a26 	vdiv.f32	s15, s12, s13
          (tProfile->dVelMax * tProfile->dVelMax) -
 8001656:	ee77 7a67 	vsub.f32	s15, s14, s15
  tProfile->dC3 =
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	edc3 7a08 	vstr	s15, [r3, #32]

  tProfile->dMidStep1 = tProfile->dVelMax / tProfile->dAccelMax;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	edd3 6a01 	vldr	s13, [r3, #4]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	ed93 7a00 	vldr	s14, [r3]
 800166c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
  tProfile->dMidStep2 = tProfile->dPosMax / tProfile->dVelMax;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	edd3 6a02 	vldr	s13, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  tProfile->dMidStep3 = tProfile->dMidStep1 + tProfile->dMidStep2;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

  tProfile->nTime = 0;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <MotorMovePosV>:

void MotorMovePosV(PROFILE_t *tProfile, PID_CONTROL_t *tPIDControl,
                  Motor_t *tmotor, TIM_HandleTypeDef *htim) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
 80016c4:	603b      	str	r3, [r7, #0]
  int32_t g_nDutyCycle;

  float dPosTemp = 0;
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]
  float g_dCmdVel = 0;
 80016cc:	f04f 0300 	mov.w	r3, #0
 80016d0:	61bb      	str	r3, [r7, #24]

  // Profile trapezoidal Speed
  if (tProfile->nTime <= tProfile->dMidStep1) {
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80016de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e6:	d81b      	bhi.n	8001720 <MotorMovePosV+0x68>
    dPosTemp = (float)(tProfile->dA1 * tProfile->nTime * tProfile->nTime);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	ed93 7a03 	vldr	s14, [r3, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80016f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80016fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001702:	edc7 7a07 	vstr	s15, [r7, #28]
    g_dCmdVel = 2 * tProfile->dA1 * tProfile->nTime;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	edd3 7a03 	vldr	s15, [r3, #12]
 800170c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800171a:	edc7 7a06 	vstr	s15, [r7, #24]
 800171e:	e05b      	b.n	80017d8 <MotorMovePosV+0x120>
  } else if (tProfile->nTime <= tProfile->dMidStep2) {
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800172c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001734:	d812      	bhi.n	800175c <MotorMovePosV+0xa4>
    dPosTemp = (float)(tProfile->dA2 * tProfile->nTime + tProfile->dB2);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	ed93 7a04 	vldr	s14, [r3, #16]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001742:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	edd3 7a05 	vldr	s15, [r3, #20]
 800174c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001750:	edc7 7a07 	vstr	s15, [r7, #28]
    g_dCmdVel = tProfile->dA2;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	61bb      	str	r3, [r7, #24]
 800175a:	e03d      	b.n	80017d8 <MotorMovePosV+0x120>
  } else if (tProfile->nTime <= tProfile->dMidStep3) {
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001768:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800176c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001770:	d82f      	bhi.n	80017d2 <MotorMovePosV+0x11a>
    dPosTemp = (float)(tProfile->dA3 * tProfile->nTime * tProfile->nTime +
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	ed93 7a06 	vldr	s14, [r3, #24]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800177e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001788:	ee27 7a27 	vmul.f32	s14, s14, s15
                       tProfile->dB3 * tProfile->nTime + tProfile->dC3);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	edd3 6a07 	vldr	s13, [r3, #28]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001798:	ee66 7aa7 	vmul.f32	s15, s13, s15
    dPosTemp = (float)(tProfile->dA3 * tProfile->nTime * tProfile->nTime +
 800179c:	ee37 7a27 	vadd.f32	s14, s14, s15
                       tProfile->dB3 * tProfile->nTime + tProfile->dC3);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	edd3 7a08 	vldr	s15, [r3, #32]
    dPosTemp = (float)(tProfile->dA3 * tProfile->nTime * tProfile->nTime +
 80017a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017aa:	edc7 7a07 	vstr	s15, [r7, #28]
    g_dCmdVel = 2 * tProfile->dA3 * tProfile->nTime + tProfile->dB3;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	edd3 7a06 	vldr	s15, [r3, #24]
 80017b4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80017be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	edd3 7a07 	vldr	s15, [r3, #28]
 80017c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017cc:	edc7 7a06 	vstr	s15, [r7, #24]
 80017d0:	e002      	b.n	80017d8 <MotorMovePosV+0x120>
  } else {
    dPosTemp = tProfile->dPosMax;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	61fb      	str	r3, [r7, #28]
  }

  // Control PID
  g_nDutyCycle = (int16_t)PIDCompute(tPIDControl, g_dCmdVel, tmotor->velocity,
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	edd3 7a05 	vldr	s15, [r3, #20]
 80017de:	ed9f 1a34 	vldr	s2, [pc, #208]	; 80018b0 <MotorMovePosV+0x1f8>
 80017e2:	eef0 0a67 	vmov.f32	s1, s15
 80017e6:	ed97 0a06 	vldr	s0, [r7, #24]
 80017ea:	68b8      	ldr	r0, [r7, #8]
 80017ec:	f000 f982 	bl	8001af4 <PIDCompute>
 80017f0:	eef0 7a40 	vmov.f32	s15, s0
 80017f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017f8:	ee17 3a90 	vmov	r3, s15
 80017fc:	b21b      	sxth	r3, r3
 80017fe:	617b      	str	r3, [r7, #20]
		  SAMPLING_TIME);
  MotorSetDuty(g_nDutyCycle, htim);
 8001800:	6839      	ldr	r1, [r7, #0]
 8001802:	6978      	ldr	r0, [r7, #20]
 8001804:	f7ff fd7c 	bl	8001300 <MotorSetDuty>

  if (tProfile->nTime > tProfile->dMidStep3) {
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001814:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181c:	dd19      	ble.n	8001852 <MotorMovePosV+0x19a>

    dPosTemp = 0;
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
    g_nDutyCycle = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
    MotorReset(tmotor);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff fd34 	bl	8001296 <MotorReset>
    PIDReset(tPIDControl);
 800182e:	68b8      	ldr	r0, [r7, #8]
 8001830:	f000 f94a 	bl	8001ac8 <PIDReset>
    g_dCmdVel = 0;
 8001834:	f04f 0300 	mov.w	r3, #0
 8001838:	61bb      	str	r3, [r7, #24]
    MotorSetDuty(g_nDutyCycle, htim);
 800183a:	6839      	ldr	r1, [r7, #0]
 800183c:	6978      	ldr	r0, [r7, #20]
 800183e:	f7ff fd5f 	bl	8001300 <MotorSetDuty>
    tProfile->nTime = 0;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	631a      	str	r2, [r3, #48]	; 0x30
    htim->Instance->CNT = 0;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2200      	movs	r2, #0
 8001850:	625a      	str	r2, [r3, #36]	; 0x24
  }

  tmotor->p_ref0 = tmotor->p_ref;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a1a      	ldr	r2, [r3, #32]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	629a      	str	r2, [r3, #40]	; 0x28
  tmotor->v_ref0 = tmotor->v_ref;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	62da      	str	r2, [r3, #44]	; 0x2c

  tmotor->p_ref = dPosTemp * DEGREE;
 8001862:	edd7 7a07 	vldr	s15, [r7, #28]
 8001866:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80018b4 <MotorMovePosV+0x1fc>
 800186a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	edc3 7a08 	vstr	s15, [r3, #32]
  tmotor->v_ref = g_dCmdVel;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	625a      	str	r2, [r3, #36]	; 0x24

  tProfile->nTime += SAMPLING_TIME / MINUTE;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fe0e 	bl	80004a0 <__aeabi_f2d>
 8001884:	a308      	add	r3, pc, #32	; (adr r3, 80018a8 <MotorMovePosV+0x1f0>)
 8001886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188a:	f7fe fcab 	bl	80001e4 <__adddf3>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4610      	mov	r0, r2
 8001894:	4619      	mov	r1, r3
 8001896:	f7ff f86d 	bl	8000974 <__aeabi_d2f>
 800189a:	4602      	mov	r2, r0
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	631a      	str	r2, [r3, #48]	; 0x30
}
 80018a0:	bf00      	nop
 80018a2:	3720      	adds	r7, #32
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	c3ece2a5 	.word	0xc3ece2a5
 80018ac:	3f25d867 	.word	0x3f25d867
 80018b0:	3c23d70a 	.word	0x3c23d70a
 80018b4:	43b40000 	.word	0x43b40000

080018b8 <MotorMovePosP>:

void MotorMovePosP(PROFILE_t *tProfile, PID_CONTROL_t *tPIDControl,
                  Motor_t *tmotor, TIM_HandleTypeDef *htim) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
 80018c4:	603b      	str	r3, [r7, #0]
  int32_t g_nDutyCycle;

  float dPosTemp = 0;
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
  float g_dCmdVel = 0;
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	61bb      	str	r3, [r7, #24]

  // Profile trapezoidal Speed
  if (tProfile->nTime <= tProfile->dMidStep1) {
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80018de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e6:	d81b      	bhi.n	8001920 <MotorMovePosP+0x68>
    dPosTemp = (float)(tProfile->dA1 * tProfile->nTime * tProfile->nTime);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	ed93 7a03 	vldr	s14, [r3, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80018f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80018fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001902:	edc7 7a07 	vstr	s15, [r7, #28]
    g_dCmdVel = 2 * tProfile->dA1 * tProfile->nTime;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	edd3 7a03 	vldr	s15, [r3, #12]
 800190c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800191a:	edc7 7a06 	vstr	s15, [r7, #24]
 800191e:	e05b      	b.n	80019d8 <MotorMovePosP+0x120>
  } else if (tProfile->nTime <= tProfile->dMidStep2) {
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800192c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001934:	d812      	bhi.n	800195c <MotorMovePosP+0xa4>
    dPosTemp = (float)(tProfile->dA2 * tProfile->nTime + tProfile->dB2);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	ed93 7a04 	vldr	s14, [r3, #16]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001942:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	edd3 7a05 	vldr	s15, [r3, #20]
 800194c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001950:	edc7 7a07 	vstr	s15, [r7, #28]
    g_dCmdVel = tProfile->dA2;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	61bb      	str	r3, [r7, #24]
 800195a:	e03d      	b.n	80019d8 <MotorMovePosP+0x120>
  } else if (tProfile->nTime <= tProfile->dMidStep3) {
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001968:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800196c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001970:	d82f      	bhi.n	80019d2 <MotorMovePosP+0x11a>
    dPosTemp = (float)(tProfile->dA3 * tProfile->nTime * tProfile->nTime +
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	ed93 7a06 	vldr	s14, [r3, #24]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800197e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001988:	ee27 7a27 	vmul.f32	s14, s14, s15
                       tProfile->dB3 * tProfile->nTime + tProfile->dC3);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	edd3 6a07 	vldr	s13, [r3, #28]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001998:	ee66 7aa7 	vmul.f32	s15, s13, s15
    dPosTemp = (float)(tProfile->dA3 * tProfile->nTime * tProfile->nTime +
 800199c:	ee37 7a27 	vadd.f32	s14, s14, s15
                       tProfile->dB3 * tProfile->nTime + tProfile->dC3);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	edd3 7a08 	vldr	s15, [r3, #32]
    dPosTemp = (float)(tProfile->dA3 * tProfile->nTime * tProfile->nTime +
 80019a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019aa:	edc7 7a07 	vstr	s15, [r7, #28]
    g_dCmdVel = 2 * tProfile->dA3 * tProfile->nTime + tProfile->dB3;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	edd3 7a06 	vldr	s15, [r3, #24]
 80019b4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80019be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	edd3 7a07 	vldr	s15, [r3, #28]
 80019c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019cc:	edc7 7a06 	vstr	s15, [r7, #24]
 80019d0:	e002      	b.n	80019d8 <MotorMovePosP+0x120>
  } else {
    dPosTemp = tProfile->dPosMax;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	61fb      	str	r3, [r7, #28]
  }

  // Control PID
  g_nDutyCycle = (int16_t)PIDCompute(tPIDControl, dPosTemp * DEGREE, tmotor->position,
 80019d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80019dc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001ac0 <MotorMovePosP+0x208>
 80019e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	ed93 7a06 	vldr	s14, [r3, #24]
 80019ea:	ed9f 1a36 	vldr	s2, [pc, #216]	; 8001ac4 <MotorMovePosP+0x20c>
 80019ee:	eef0 0a47 	vmov.f32	s1, s14
 80019f2:	eeb0 0a67 	vmov.f32	s0, s15
 80019f6:	68b8      	ldr	r0, [r7, #8]
 80019f8:	f000 f87c 	bl	8001af4 <PIDCompute>
 80019fc:	eef0 7a40 	vmov.f32	s15, s0
 8001a00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a04:	ee17 3a90 	vmov	r3, s15
 8001a08:	b21b      	sxth	r3, r3
 8001a0a:	617b      	str	r3, [r7, #20]
		  SAMPLING_TIME);
  MotorSetDuty(g_nDutyCycle, htim);
 8001a0c:	6839      	ldr	r1, [r7, #0]
 8001a0e:	6978      	ldr	r0, [r7, #20]
 8001a10:	f7ff fc76 	bl	8001300 <MotorSetDuty>

  if (tProfile->nTime > tProfile->dMidStep3) {
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001a20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a28:	dd19      	ble.n	8001a5e <MotorMovePosP+0x1a6>

    dPosTemp = 0;
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
    g_nDutyCycle = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
    MotorReset(tmotor);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff fc2e 	bl	8001296 <MotorReset>
    PIDReset(tPIDControl);
 8001a3a:	68b8      	ldr	r0, [r7, #8]
 8001a3c:	f000 f844 	bl	8001ac8 <PIDReset>
    g_dCmdVel = 0;
 8001a40:	f04f 0300 	mov.w	r3, #0
 8001a44:	61bb      	str	r3, [r7, #24]
    MotorSetDuty(g_nDutyCycle, htim);
 8001a46:	6839      	ldr	r1, [r7, #0]
 8001a48:	6978      	ldr	r0, [r7, #20]
 8001a4a:	f7ff fc59 	bl	8001300 <MotorSetDuty>
    tProfile->nTime = 0;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	631a      	str	r2, [r3, #48]	; 0x30
    htim->Instance->CNT = 0;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	625a      	str	r2, [r3, #36]	; 0x24
  }

  tmotor->p_ref0 = tmotor->p_ref;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a1a      	ldr	r2, [r3, #32]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	629a      	str	r2, [r3, #40]	; 0x28
  tmotor->v_ref0 = tmotor->v_ref;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	62da      	str	r2, [r3, #44]	; 0x2c

  tmotor->p_ref = dPosTemp * DEGREE;
 8001a6e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a72:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001ac0 <MotorMovePosP+0x208>
 8001a76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	edc3 7a08 	vstr	s15, [r3, #32]
  tmotor->v_ref = g_dCmdVel;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	625a      	str	r2, [r3, #36]	; 0x24

  tProfile->nTime += SAMPLING_TIME / MINUTE;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fd08 	bl	80004a0 <__aeabi_f2d>
 8001a90:	a309      	add	r3, pc, #36	; (adr r3, 8001ab8 <MotorMovePosP+0x200>)
 8001a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a96:	f7fe fba5 	bl	80001e4 <__adddf3>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f7fe ff67 	bl	8000974 <__aeabi_d2f>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001aac:	bf00      	nop
 8001aae:	3720      	adds	r7, #32
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	f3af 8000 	nop.w
 8001ab8:	c3ece2a5 	.word	0xc3ece2a5
 8001abc:	3f25d867 	.word	0x3f25d867
 8001ac0:	43b40000 	.word	0x43b40000
 8001ac4:	3c23d70a 	.word	0x3c23d70a

08001ac8 <PIDReset>:
#include "pid.h"
#include "tim.h"

// reset PID params
void PIDReset(PID_CONTROL_t *PID_Ctrl) {
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  PID_Ctrl->dIntergral = 0.0f;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  PID_Ctrl->dErrorTerm = 0.0f;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	60da      	str	r2, [r3, #12]
  PID_Ctrl->result = 0.0f;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	615a      	str	r2, [r3, #20]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <PIDCompute>:
  PID_Ctrl->dKd = dKd;
}

// Compute PID Controllers
float PIDCompute(PID_CONTROL_t *PID_Ctrl, float SetPoint, float Input,
                 float dTs) {
 8001af4:	b480      	push	{r7}
 8001af6:	b089      	sub	sp, #36	; 0x24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b00:	edc7 0a01 	vstr	s1, [r7, #4]
 8001b04:	ed87 1a00 	vstr	s2, [r7]

  float Error = SetPoint - Input;
 8001b08:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b14:	edc7 7a07 	vstr	s15, [r7, #28]
  float dP = 0, dI = 0, dD = 0;
 8001b18:	f04f 0300 	mov.w	r3, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	f04f 0300 	mov.w	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
  dP = PID_Ctrl->dKp * Error;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	edd3 7a00 	vldr	s15, [r3]
 8001b30:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b38:	edc7 7a06 	vstr	s15, [r7, #24]
  PID_Ctrl->dIntergral += Error;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b42:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	edc3 7a04 	vstr	s15, [r3, #16]

  if (PID_Ctrl->dIntergral > MAX_INTERGRAL) {
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b56:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001c1c <PIDCompute+0x128>
 8001b5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b62:	dd02      	ble.n	8001b6a <PIDCompute+0x76>
    PID_Ctrl->dIntergral = MAX_INTERGRAL;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4a2e      	ldr	r2, [pc, #184]	; (8001c20 <PIDCompute+0x12c>)
 8001b68:	611a      	str	r2, [r3, #16]
  }


  dI = PID_Ctrl->dKi * dTs * PID_Ctrl->dIntergral;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b70:	edd7 7a00 	vldr	s15, [r7]
 8001b74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b82:	edc7 7a05 	vstr	s15, [r7, #20]
  dD = PID_Ctrl->dKd * (Error - PID_Ctrl->dErrorTerm) / dTs;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b92:	edd7 6a07 	vldr	s13, [r7, #28]
 8001b96:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b9a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001b9e:	ed97 7a00 	vldr	s14, [r7]
 8001ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ba6:	edc7 7a04 	vstr	s15, [r7, #16]

  PID_Ctrl->result = GAIN_PID * (dP + dI + dD);
 8001baa:	ed97 7a06 	vldr	s14, [r7, #24]
 8001bae:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bb6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bbe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001bc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	edc3 7a05 	vstr	s15, [r3, #20]

  if (PID_Ctrl->result > PID_RS_MAX) {
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	edd3 7a05 	vldr	s15, [r3, #20]
 8001bd2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001c24 <PIDCompute+0x130>
 8001bd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bde:	dd02      	ble.n	8001be6 <PIDCompute+0xf2>
    PID_Ctrl->result = PID_RS_MAX;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4a11      	ldr	r2, [pc, #68]	; (8001c28 <PIDCompute+0x134>)
 8001be4:	615a      	str	r2, [r3, #20]
  }
  if (PID_Ctrl->result < PID_RS_MIN) {
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	edd3 7a05 	vldr	s15, [r3, #20]
 8001bec:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001c2c <PIDCompute+0x138>
 8001bf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf8:	d502      	bpl.n	8001c00 <PIDCompute+0x10c>
    PID_Ctrl->result = PID_RS_MIN;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4a0c      	ldr	r2, [pc, #48]	; (8001c30 <PIDCompute+0x13c>)
 8001bfe:	615a      	str	r2, [r3, #20]
  }

  PID_Ctrl->dErrorTerm = Error;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	69fa      	ldr	r2, [r7, #28]
 8001c04:	60da      	str	r2, [r3, #12]

  return PID_Ctrl->result;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	ee07 3a90 	vmov	s15, r3
}
 8001c0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c12:	3724      	adds	r7, #36	; 0x24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	43480000 	.word	0x43480000
 8001c20:	43480000 	.word	0x43480000
 8001c24:	42c80000 	.word	0x42c80000
 8001c28:	42c80000 	.word	0x42c80000
 8001c2c:	c2c80000 	.word	0xc2c80000
 8001c30:	c2c80000 	.word	0xc2c80000

08001c34 <subString>:



//cut the string
uint8_t *subString(uint8_t *pBuff, int nPos, int nIndex)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
    uint8_t *t = &pBuff[nPos];
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	4413      	add	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
    pBuff[nPos -1] = '\0';
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4413      	add	r3, r2
 8001c50:	2200      	movs	r2, #0
 8001c52:	701a      	strb	r2, [r3, #0]
    for(int i = nIndex; i <(strlen((char*)t) + 1); i++)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	e007      	b.n	8001c6a <subString+0x36>
    {
        t[i] = '\0';
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4413      	add	r3, r2
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
    for(int i = nIndex; i <(strlen((char*)t) + 1); i++)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	3301      	adds	r3, #1
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	6938      	ldr	r0, [r7, #16]
 8001c6c:	f7fe faac 	bl	80001c8 <strlen>
 8001c70:	4603      	mov	r3, r0
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d8ef      	bhi.n	8001c5a <subString+0x26>
    }
    return t;
 8001c7a:	693b      	ldr	r3, [r7, #16]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <StrCompare>:

//Compare 2 string
bool StrCompare(uint8_t *pBuff, uint8_t *pSample, uint8_t nSize)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b087      	sub	sp, #28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < nSize; i++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	e00e      	b.n	8001cb6 <StrCompare+0x32>
    {
        if(pBuff[i] != pSample[i])
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	781a      	ldrb	r2, [r3, #0]
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	68b9      	ldr	r1, [r7, #8]
 8001ca4:	440b      	add	r3, r1
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d001      	beq.n	8001cb0 <StrCompare+0x2c>
        {
            return false;
 8001cac:	2300      	movs	r3, #0
 8001cae:	e007      	b.n	8001cc0 <StrCompare+0x3c>
    for (int i = 0; i < nSize; i++)
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	dbec      	blt.n	8001c98 <StrCompare+0x14>
        }
    }
    return true;
 8001cbe:	2301      	movs	r3, #1
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	371c      	adds	r7, #28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <SerialInit>:

//receive data
void SerialInit(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, (uint8_t *)g_nRxBuff, MAX_LEN);
 8001cd0:	2217      	movs	r2, #23
 8001cd2:	4903      	ldr	r1, [pc, #12]	; (8001ce0 <SerialInit+0x14>)
 8001cd4:	4803      	ldr	r0, [pc, #12]	; (8001ce4 <SerialInit+0x18>)
 8001cd6:	f002 fe86 	bl	80049e6 <HAL_UART_Receive_IT>
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000134 	.word	0x20000134
 8001ce4:	20000260 	.word	0x20000260

08001ce8 <SerialAcceptReceive>:

//receive data
void SerialAcceptReceive(void)
{	HAL_UART_Receive_IT(&huart2, (uint8_t*)g_nRxBuff, MAX_LEN);
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	2217      	movs	r2, #23
 8001cee:	4903      	ldr	r1, [pc, #12]	; (8001cfc <SerialAcceptReceive+0x14>)
 8001cf0:	4803      	ldr	r0, [pc, #12]	; (8001d00 <SerialAcceptReceive+0x18>)
 8001cf2:	f002 fe78 	bl	80049e6 <HAL_UART_Receive_IT>
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000134 	.word	0x20000134
 8001d00:	20000260 	.word	0x20000260

08001d04 <SerialWriteComm>:

//send data to GUI
void SerialWriteComm(uint8_t *pStrCmd, uint8_t *pData)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
    uint8_t *pBuff;
    pBuff = (uint8_t *)malloc(22);
 8001d0e:	2016      	movs	r0, #22
 8001d10:	f003 fe2c 	bl	800596c <malloc>
 8001d14:	4603      	mov	r3, r0
 8001d16:	60fb      	str	r3, [r7, #12]
    uint8_t nIndex = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	72fb      	strb	r3, [r7, #11]

    memcpy(pBuff + nIndex, STX, 1);
 8001d1c:	7afb      	ldrb	r3, [r7, #11]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	4413      	add	r3, r2
 8001d22:	4a17      	ldr	r2, [pc, #92]	; (8001d80 <SerialWriteComm+0x7c>)
 8001d24:	7812      	ldrb	r2, [r2, #0]
 8001d26:	701a      	strb	r2, [r3, #0]
    nIndex += 1;
 8001d28:	7afb      	ldrb	r3, [r7, #11]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	72fb      	strb	r3, [r7, #11]
    memcpy(pBuff + nIndex, pStrCmd, 4);
 8001d2e:	7afb      	ldrb	r3, [r7, #11]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	601a      	str	r2, [r3, #0]
    nIndex += 4;
 8001d3a:	7afb      	ldrb	r3, [r7, #11]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	72fb      	strb	r3, [r7, #11]
    memcpy(pBuff + nIndex, pData, 16);
 8001d40:	7afb      	ldrb	r3, [r7, #11]
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	4413      	add	r3, r2
 8001d46:	2210      	movs	r2, #16
 8001d48:	6839      	ldr	r1, [r7, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f003 fe1e 	bl	800598c <memcpy>
    nIndex += 16;
 8001d50:	7afb      	ldrb	r3, [r7, #11]
 8001d52:	3310      	adds	r3, #16
 8001d54:	72fb      	strb	r3, [r7, #11]
    memcpy(pBuff + nIndex, ETX, 1);
 8001d56:	7afb      	ldrb	r3, [r7, #11]
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <SerialWriteComm+0x80>)
 8001d5e:	7812      	ldrb	r2, [r2, #0]
 8001d60:	701a      	strb	r2, [r3, #0]

    HAL_UART_Transmit(&huart2, pBuff, 22 , 1000);
 8001d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d66:	2216      	movs	r2, #22
 8001d68:	68f9      	ldr	r1, [r7, #12]
 8001d6a:	4807      	ldr	r0, [pc, #28]	; (8001d88 <SerialWriteComm+0x84>)
 8001d6c:	f002 fda9 	bl	80048c2 <HAL_UART_Transmit>

    free(pBuff);
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f003 fe03 	bl	800597c <free>

}
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000000 	.word	0x20000000
 8001d84:	20000004 	.word	0x20000004
 8001d88:	20000260 	.word	0x20000260

08001d8c <SerialParse>:

//parse data to Command, Option, Data
void SerialParse(uint8_t *pBuff)
{
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
    if((pBuff[0] == STX[0]) && (pBuff[22] == ETX[0]))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	781a      	ldrb	r2, [r3, #0]
 8001d98:	4b3e      	ldr	r3, [pc, #248]	; (8001e94 <SerialParse+0x108>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d175      	bne.n	8001e8c <SerialParse+0x100>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3316      	adds	r3, #22
 8001da4:	781a      	ldrb	r2, [r3, #0]
 8001da6:	4b3c      	ldr	r3, [pc, #240]	; (8001e98 <SerialParse+0x10c>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d16e      	bne.n	8001e8c <SerialParse+0x100>
  {
    memcpy(g_strCommand, subString(g_nRxBuff, 1,5), 5);
 8001dae:	2205      	movs	r2, #5
 8001db0:	2101      	movs	r1, #1
 8001db2:	483a      	ldr	r0, [pc, #232]	; (8001e9c <SerialParse+0x110>)
 8001db4:	f7ff ff3e 	bl	8001c34 <subString>
 8001db8:	4602      	mov	r2, r0
 8001dba:	4b39      	ldr	r3, [pc, #228]	; (8001ea0 <SerialParse+0x114>)
 8001dbc:	6810      	ldr	r0, [r2, #0]
 8001dbe:	6018      	str	r0, [r3, #0]
 8001dc0:	7912      	ldrb	r2, [r2, #4]
 8001dc2:	711a      	strb	r2, [r3, #4]

    memcpy(g_nRxData, subString(g_nRxBuff, 6,16), 16);
 8001dc4:	2210      	movs	r2, #16
 8001dc6:	2106      	movs	r1, #6
 8001dc8:	4834      	ldr	r0, [pc, #208]	; (8001e9c <SerialParse+0x110>)
 8001dca:	f7ff ff33 	bl	8001c34 <subString>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	4a34      	ldr	r2, [pc, #208]	; (8001ea4 <SerialParse+0x118>)
 8001dd2:	4614      	mov	r4, r2
 8001dd4:	6818      	ldr	r0, [r3, #0]
 8001dd6:	6859      	ldr	r1, [r3, #4]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    if(StrCompare(g_strCommand, (uint8_t*)"SPID", 4))
 8001dde:	2204      	movs	r2, #4
 8001de0:	4931      	ldr	r1, [pc, #196]	; (8001ea8 <SerialParse+0x11c>)
 8001de2:	482f      	ldr	r0, [pc, #188]	; (8001ea0 <SerialParse+0x114>)
 8001de4:	f7ff ff4e 	bl	8001c84 <StrCompare>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d028      	beq.n	8001e40 <SerialParse+0xb4>
    {
    	memcpy(g_kp, subString(g_nRxData, 0, 4), 4);
 8001dee:	2204      	movs	r2, #4
 8001df0:	2100      	movs	r1, #0
 8001df2:	482c      	ldr	r0, [pc, #176]	; (8001ea4 <SerialParse+0x118>)
 8001df4:	f7ff ff1e 	bl	8001c34 <subString>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b2b      	ldr	r3, [pc, #172]	; (8001eac <SerialParse+0x120>)
 8001e00:	601a      	str	r2, [r3, #0]
    	memcpy(g_ki, subString(g_nRxData, 4, 4), 4);
 8001e02:	2204      	movs	r2, #4
 8001e04:	2104      	movs	r1, #4
 8001e06:	4827      	ldr	r0, [pc, #156]	; (8001ea4 <SerialParse+0x118>)
 8001e08:	f7ff ff14 	bl	8001c34 <subString>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	461a      	mov	r2, r3
 8001e12:	4b27      	ldr	r3, [pc, #156]	; (8001eb0 <SerialParse+0x124>)
 8001e14:	601a      	str	r2, [r3, #0]
    	memcpy(g_kd, subString(g_nRxData, 8, 4), 4);
 8001e16:	2204      	movs	r2, #4
 8001e18:	2108      	movs	r1, #8
 8001e1a:	4822      	ldr	r0, [pc, #136]	; (8001ea4 <SerialParse+0x118>)
 8001e1c:	f7ff ff0a 	bl	8001c34 <subString>
 8001e20:	4603      	mov	r3, r0
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b23      	ldr	r3, [pc, #140]	; (8001eb4 <SerialParse+0x128>)
 8001e28:	601a      	str	r2, [r3, #0]
    	memcpy(g_Setpoint, subString(g_nRxData, 12, 4), 4);
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	210c      	movs	r1, #12
 8001e2e:	481d      	ldr	r0, [pc, #116]	; (8001ea4 <SerialParse+0x118>)
 8001e30:	f7ff ff00 	bl	8001c34 <subString>
 8001e34:	4603      	mov	r3, r0
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b1f      	ldr	r3, [pc, #124]	; (8001eb8 <SerialParse+0x12c>)
 8001e3c:	601a      	str	r2, [r3, #0]
    	memcpy(g_Amax, subString(g_nRxData, 0, 4), 4);
    	memcpy(g_Vmax, subString(g_nRxData, 4, 4), 4);
    	memcpy(g_Position, subString(g_nRxData, 8, 4), 4);
    }
  }
}
 8001e3e:	e025      	b.n	8001e8c <SerialParse+0x100>
    else if(StrCompare(g_strCommand, (uint8_t*)"SINF", 4))
 8001e40:	2204      	movs	r2, #4
 8001e42:	491e      	ldr	r1, [pc, #120]	; (8001ebc <SerialParse+0x130>)
 8001e44:	4816      	ldr	r0, [pc, #88]	; (8001ea0 <SerialParse+0x114>)
 8001e46:	f7ff ff1d 	bl	8001c84 <StrCompare>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d01d      	beq.n	8001e8c <SerialParse+0x100>
    	memcpy(g_Amax, subString(g_nRxData, 0, 4), 4);
 8001e50:	2204      	movs	r2, #4
 8001e52:	2100      	movs	r1, #0
 8001e54:	4813      	ldr	r0, [pc, #76]	; (8001ea4 <SerialParse+0x118>)
 8001e56:	f7ff feed 	bl	8001c34 <subString>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <SerialParse+0x134>)
 8001e62:	601a      	str	r2, [r3, #0]
    	memcpy(g_Vmax, subString(g_nRxData, 4, 4), 4);
 8001e64:	2204      	movs	r2, #4
 8001e66:	2104      	movs	r1, #4
 8001e68:	480e      	ldr	r0, [pc, #56]	; (8001ea4 <SerialParse+0x118>)
 8001e6a:	f7ff fee3 	bl	8001c34 <subString>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	461a      	mov	r2, r3
 8001e74:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <SerialParse+0x138>)
 8001e76:	601a      	str	r2, [r3, #0]
    	memcpy(g_Position, subString(g_nRxData, 8, 4), 4);
 8001e78:	2204      	movs	r2, #4
 8001e7a:	2108      	movs	r1, #8
 8001e7c:	4809      	ldr	r0, [pc, #36]	; (8001ea4 <SerialParse+0x118>)
 8001e7e:	f7ff fed9 	bl	8001c34 <subString>
 8001e82:	4603      	mov	r3, r0
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <SerialParse+0x13c>)
 8001e8a:	601a      	str	r2, [r3, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd90      	pop	{r4, r7, pc}
 8001e94:	20000000 	.word	0x20000000
 8001e98:	20000004 	.word	0x20000004
 8001e9c:	20000134 	.word	0x20000134
 8001ea0:	2000014c 	.word	0x2000014c
 8001ea4:	20000154 	.word	0x20000154
 8001ea8:	08005c04 	.word	0x08005c04
 8001eac:	20000164 	.word	0x20000164
 8001eb0:	20000168 	.word	0x20000168
 8001eb4:	2000016c 	.word	0x2000016c
 8001eb8:	20000170 	.word	0x20000170
 8001ebc:	08005c0c 	.word	0x08005c0c
 8001ec0:	20000178 	.word	0x20000178
 8001ec4:	20000174 	.word	0x20000174
 8001ec8:	2000017c 	.word	0x2000017c

08001ecc <HAL_UART_RxCpltCallback>:


//interupt uart RX
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
    if(huart ->Instance == huart2.Instance)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <HAL_UART_RxCpltCallback+0x34>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d105      	bne.n	8001eec <HAL_UART_RxCpltCallback+0x20>
    {
        g_bDataAvailable = true;
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <HAL_UART_RxCpltCallback+0x38>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	701a      	strb	r2, [r3, #0]
        SerialParse(g_nRxBuff);
 8001ee6:	4808      	ldr	r0, [pc, #32]	; (8001f08 <HAL_UART_RxCpltCallback+0x3c>)
 8001ee8:	f7ff ff50 	bl	8001d8c <SerialParse>

    }
    HAL_UART_Receive_IT(&huart2,(uint8_t*)g_nRxBuff, MAX_LEN);
 8001eec:	2217      	movs	r2, #23
 8001eee:	4906      	ldr	r1, [pc, #24]	; (8001f08 <HAL_UART_RxCpltCallback+0x3c>)
 8001ef0:	4803      	ldr	r0, [pc, #12]	; (8001f00 <HAL_UART_RxCpltCallback+0x34>)
 8001ef2:	f002 fd78 	bl	80049e6 <HAL_UART_Receive_IT>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000260 	.word	0x20000260
 8001f04:	20000180 	.word	0x20000180
 8001f08:	20000134 	.word	0x20000134

08001f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	607b      	str	r3, [r7, #4]
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <HAL_MspInit+0x4c>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	4a0f      	ldr	r2, [pc, #60]	; (8001f58 <HAL_MspInit+0x4c>)
 8001f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f20:	6453      	str	r3, [r2, #68]	; 0x44
 8001f22:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <HAL_MspInit+0x4c>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	603b      	str	r3, [r7, #0]
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <HAL_MspInit+0x4c>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	4a08      	ldr	r2, [pc, #32]	; (8001f58 <HAL_MspInit+0x4c>)
 8001f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_MspInit+0x4c>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	40023800 	.word	0x40023800

08001f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f60:	e7fe      	b.n	8001f60 <NMI_Handler+0x4>

08001f62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f66:	e7fe      	b.n	8001f66 <HardFault_Handler+0x4>

08001f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <MemManage_Handler+0x4>

08001f6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f72:	e7fe      	b.n	8001f72 <BusFault_Handler+0x4>

08001f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f78:	e7fe      	b.n	8001f78 <UsageFault_Handler+0x4>

08001f7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fa8:	f000 fb20 	bl	80025ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <TIM4_IRQHandler+0x10>)
 8001fb6:	f001 fddd 	bl	8003b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000218 	.word	0x20000218

08001fc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <USART2_IRQHandler+0x10>)
 8001fca:	f002 fd3d 	bl	8004a48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000260 	.word	0x20000260

08001fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fe0:	4a14      	ldr	r2, [pc, #80]	; (8002034 <_sbrk+0x5c>)
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <_sbrk+0x60>)
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fec:	4b13      	ldr	r3, [pc, #76]	; (800203c <_sbrk+0x64>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d102      	bne.n	8001ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ff4:	4b11      	ldr	r3, [pc, #68]	; (800203c <_sbrk+0x64>)
 8001ff6:	4a12      	ldr	r2, [pc, #72]	; (8002040 <_sbrk+0x68>)
 8001ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ffa:	4b10      	ldr	r3, [pc, #64]	; (800203c <_sbrk+0x64>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4413      	add	r3, r2
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	429a      	cmp	r2, r3
 8002006:	d207      	bcs.n	8002018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002008:	f003 fc86 	bl	8005918 <__errno>
 800200c:	4603      	mov	r3, r0
 800200e:	220c      	movs	r2, #12
 8002010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002012:	f04f 33ff 	mov.w	r3, #4294967295
 8002016:	e009      	b.n	800202c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <_sbrk+0x64>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800201e:	4b07      	ldr	r3, [pc, #28]	; (800203c <_sbrk+0x64>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	4a05      	ldr	r2, [pc, #20]	; (800203c <_sbrk+0x64>)
 8002028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800202a:	68fb      	ldr	r3, [r7, #12]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20020000 	.word	0x20020000
 8002038:	00000400 	.word	0x00000400
 800203c:	20000184 	.word	0x20000184
 8002040:	200002b8 	.word	0x200002b8

08002044 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <SystemInit+0x20>)
 800204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204e:	4a05      	ldr	r2, [pc, #20]	; (8002064 <SystemInit+0x20>)
 8002050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08a      	sub	sp, #40	; 0x28
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800206e:	f107 0320 	add.w	r3, r7, #32
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002078:	1d3b      	adds	r3, r7, #4
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	60da      	str	r2, [r3, #12]
 8002084:	611a      	str	r2, [r3, #16]
 8002086:	615a      	str	r2, [r3, #20]
 8002088:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800208a:	4b27      	ldr	r3, [pc, #156]	; (8002128 <MX_TIM2_Init+0xc0>)
 800208c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002090:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 29;
 8002092:	4b25      	ldr	r3, [pc, #148]	; (8002128 <MX_TIM2_Init+0xc0>)
 8002094:	221d      	movs	r2, #29
 8002096:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8002098:	4b23      	ldr	r3, [pc, #140]	; (8002128 <MX_TIM2_Init+0xc0>)
 800209a:	2260      	movs	r2, #96	; 0x60
 800209c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800209e:	4b22      	ldr	r3, [pc, #136]	; (8002128 <MX_TIM2_Init+0xc0>)
 80020a0:	2263      	movs	r2, #99	; 0x63
 80020a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a4:	4b20      	ldr	r3, [pc, #128]	; (8002128 <MX_TIM2_Init+0xc0>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020aa:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <MX_TIM2_Init+0xc0>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020b0:	481d      	ldr	r0, [pc, #116]	; (8002128 <MX_TIM2_Init+0xc0>)
 80020b2:	f001 fb13 	bl	80036dc <HAL_TIM_PWM_Init>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80020bc:	f7ff f8e6 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c0:	2300      	movs	r3, #0
 80020c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c4:	2300      	movs	r3, #0
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020c8:	f107 0320 	add.w	r3, r7, #32
 80020cc:	4619      	mov	r1, r3
 80020ce:	4816      	ldr	r0, [pc, #88]	; (8002128 <MX_TIM2_Init+0xc0>)
 80020d0:	f002 fb1a 	bl	8004708 <HAL_TIMEx_MasterConfigSynchronization>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80020da:	f7ff f8d7 	bl	800128c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020de:	2360      	movs	r3, #96	; 0x60
 80020e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	2200      	movs	r2, #0
 80020f2:	4619      	mov	r1, r3
 80020f4:	480c      	ldr	r0, [pc, #48]	; (8002128 <MX_TIM2_Init+0xc0>)
 80020f6:	f001 fe45 	bl	8003d84 <HAL_TIM_PWM_ConfigChannel>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002100:	f7ff f8c4 	bl	800128c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	2204      	movs	r2, #4
 8002108:	4619      	mov	r1, r3
 800210a:	4807      	ldr	r0, [pc, #28]	; (8002128 <MX_TIM2_Init+0xc0>)
 800210c:	f001 fe3a 	bl	8003d84 <HAL_TIM_PWM_ConfigChannel>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002116:	f7ff f8b9 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800211a:	4803      	ldr	r0, [pc, #12]	; (8002128 <MX_TIM2_Init+0xc0>)
 800211c:	f000 f938 	bl	8002390 <HAL_TIM_MspPostInit>

}
 8002120:	bf00      	nop
 8002122:	3728      	adds	r7, #40	; 0x28
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20000188 	.word	0x20000188

0800212c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08c      	sub	sp, #48	; 0x30
 8002130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002132:	f107 030c 	add.w	r3, r7, #12
 8002136:	2224      	movs	r2, #36	; 0x24
 8002138:	2100      	movs	r1, #0
 800213a:	4618      	mov	r0, r3
 800213c:	f003 fc34 	bl	80059a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002140:	1d3b      	adds	r3, r7, #4
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002148:	4b20      	ldr	r3, [pc, #128]	; (80021cc <MX_TIM3_Init+0xa0>)
 800214a:	4a21      	ldr	r2, [pc, #132]	; (80021d0 <MX_TIM3_Init+0xa4>)
 800214c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800214e:	4b1f      	ldr	r3, [pc, #124]	; (80021cc <MX_TIM3_Init+0xa0>)
 8002150:	2200      	movs	r2, #0
 8002152:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002154:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <MX_TIM3_Init+0xa0>)
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800215a:	4b1c      	ldr	r3, [pc, #112]	; (80021cc <MX_TIM3_Init+0xa0>)
 800215c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002160:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002162:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <MX_TIM3_Init+0xa0>)
 8002164:	2200      	movs	r2, #0
 8002166:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002168:	4b18      	ldr	r3, [pc, #96]	; (80021cc <MX_TIM3_Init+0xa0>)
 800216a:	2200      	movs	r2, #0
 800216c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800216e:	2303      	movs	r3, #3
 8002170:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002176:	2301      	movs	r3, #1
 8002178:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800217a:	2300      	movs	r3, #0
 800217c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002182:	2300      	movs	r3, #0
 8002184:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002186:	2301      	movs	r3, #1
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800218a:	2300      	movs	r3, #0
 800218c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002192:	f107 030c 	add.w	r3, r7, #12
 8002196:	4619      	mov	r1, r3
 8002198:	480c      	ldr	r0, [pc, #48]	; (80021cc <MX_TIM3_Init+0xa0>)
 800219a:	f001 fbb7 	bl	800390c <HAL_TIM_Encoder_Init>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80021a4:	f7ff f872 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021a8:	2300      	movs	r3, #0
 80021aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021b0:	1d3b      	adds	r3, r7, #4
 80021b2:	4619      	mov	r1, r3
 80021b4:	4805      	ldr	r0, [pc, #20]	; (80021cc <MX_TIM3_Init+0xa0>)
 80021b6:	f002 faa7 	bl	8004708 <HAL_TIMEx_MasterConfigSynchronization>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80021c0:	f7ff f864 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021c4:	bf00      	nop
 80021c6:	3730      	adds	r7, #48	; 0x30
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	200001d0 	.word	0x200001d0
 80021d0:	40000400 	.word	0x40000400

080021d4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021da:	f107 0308 	add.w	r3, r7, #8
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e8:	463b      	mov	r3, r7
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021f0:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <MX_TIM4_Init+0x94>)
 80021f2:	4a1e      	ldr	r2, [pc, #120]	; (800226c <MX_TIM4_Init+0x98>)
 80021f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 749;
 80021f6:	4b1c      	ldr	r3, [pc, #112]	; (8002268 <MX_TIM4_Init+0x94>)
 80021f8:	f240 22ed 	movw	r2, #749	; 0x2ed
 80021fc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021fe:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <MX_TIM4_Init+0x94>)
 8002200:	2200      	movs	r2, #0
 8002202:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002204:	4b18      	ldr	r3, [pc, #96]	; (8002268 <MX_TIM4_Init+0x94>)
 8002206:	f240 32e7 	movw	r2, #999	; 0x3e7
 800220a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800220c:	4b16      	ldr	r3, [pc, #88]	; (8002268 <MX_TIM4_Init+0x94>)
 800220e:	2200      	movs	r2, #0
 8002210:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002212:	4b15      	ldr	r3, [pc, #84]	; (8002268 <MX_TIM4_Init+0x94>)
 8002214:	2200      	movs	r2, #0
 8002216:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002218:	4813      	ldr	r0, [pc, #76]	; (8002268 <MX_TIM4_Init+0x94>)
 800221a:	f001 f99f 	bl	800355c <HAL_TIM_Base_Init>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002224:	f7ff f832 	bl	800128c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800222c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800222e:	f107 0308 	add.w	r3, r7, #8
 8002232:	4619      	mov	r1, r3
 8002234:	480c      	ldr	r0, [pc, #48]	; (8002268 <MX_TIM4_Init+0x94>)
 8002236:	f001 fe67 	bl	8003f08 <HAL_TIM_ConfigClockSource>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002240:	f7ff f824 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002244:	2300      	movs	r3, #0
 8002246:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002248:	2300      	movs	r3, #0
 800224a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800224c:	463b      	mov	r3, r7
 800224e:	4619      	mov	r1, r3
 8002250:	4805      	ldr	r0, [pc, #20]	; (8002268 <MX_TIM4_Init+0x94>)
 8002252:	f002 fa59 	bl	8004708 <HAL_TIMEx_MasterConfigSynchronization>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800225c:	f7ff f816 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002260:	bf00      	nop
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000218 	.word	0x20000218
 800226c:	40000800 	.word	0x40000800

08002270 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002280:	d10d      	bne.n	800229e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <HAL_TIM_PWM_MspInit+0x3c>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	4a08      	ldr	r2, [pc, #32]	; (80022ac <HAL_TIM_PWM_MspInit+0x3c>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	6413      	str	r3, [r2, #64]	; 0x40
 8002292:	4b06      	ldr	r3, [pc, #24]	; (80022ac <HAL_TIM_PWM_MspInit+0x3c>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800229e:	bf00      	nop
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40023800 	.word	0x40023800

080022b0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	; 0x28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a19      	ldr	r2, [pc, #100]	; (8002334 <HAL_TIM_Encoder_MspInit+0x84>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d12b      	bne.n	800232a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	4b18      	ldr	r3, [pc, #96]	; (8002338 <HAL_TIM_Encoder_MspInit+0x88>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	4a17      	ldr	r2, [pc, #92]	; (8002338 <HAL_TIM_Encoder_MspInit+0x88>)
 80022dc:	f043 0302 	orr.w	r3, r3, #2
 80022e0:	6413      	str	r3, [r2, #64]	; 0x40
 80022e2:	4b15      	ldr	r3, [pc, #84]	; (8002338 <HAL_TIM_Encoder_MspInit+0x88>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	4b11      	ldr	r3, [pc, #68]	; (8002338 <HAL_TIM_Encoder_MspInit+0x88>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	4a10      	ldr	r2, [pc, #64]	; (8002338 <HAL_TIM_Encoder_MspInit+0x88>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6313      	str	r3, [r2, #48]	; 0x30
 80022fe:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <HAL_TIM_Encoder_MspInit+0x88>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800230a:	23c0      	movs	r3, #192	; 0xc0
 800230c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230e:	2302      	movs	r3, #2
 8002310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002316:	2300      	movs	r3, #0
 8002318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800231a:	2302      	movs	r3, #2
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231e:	f107 0314 	add.w	r3, r7, #20
 8002322:	4619      	mov	r1, r3
 8002324:	4805      	ldr	r0, [pc, #20]	; (800233c <HAL_TIM_Encoder_MspInit+0x8c>)
 8002326:	f000 fb25 	bl	8002974 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800232a:	bf00      	nop
 800232c:	3728      	adds	r7, #40	; 0x28
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40000400 	.word	0x40000400
 8002338:	40023800 	.word	0x40023800
 800233c:	40020000 	.word	0x40020000

08002340 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0e      	ldr	r2, [pc, #56]	; (8002388 <HAL_TIM_Base_MspInit+0x48>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d115      	bne.n	800237e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	4b0d      	ldr	r3, [pc, #52]	; (800238c <HAL_TIM_Base_MspInit+0x4c>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	4a0c      	ldr	r2, [pc, #48]	; (800238c <HAL_TIM_Base_MspInit+0x4c>)
 800235c:	f043 0304 	orr.w	r3, r3, #4
 8002360:	6413      	str	r3, [r2, #64]	; 0x40
 8002362:	4b0a      	ldr	r3, [pc, #40]	; (800238c <HAL_TIM_Base_MspInit+0x4c>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800236e:	2200      	movs	r2, #0
 8002370:	2101      	movs	r1, #1
 8002372:	201e      	movs	r0, #30
 8002374:	f000 fa35 	bl	80027e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002378:	201e      	movs	r0, #30
 800237a:	f000 fa4e 	bl	800281a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800237e:	bf00      	nop
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40000800 	.word	0x40000800
 800238c:	40023800 	.word	0x40023800

08002390 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002398:	f107 030c 	add.w	r3, r7, #12
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b0:	d11d      	bne.n	80023ee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <HAL_TIM_MspPostInit+0x68>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	4a0f      	ldr	r2, [pc, #60]	; (80023f8 <HAL_TIM_MspPostInit+0x68>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	6313      	str	r3, [r2, #48]	; 0x30
 80023c2:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <HAL_TIM_MspPostInit+0x68>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023ce:	2303      	movs	r3, #3
 80023d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	2302      	movs	r3, #2
 80023d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023da:	2300      	movs	r3, #0
 80023dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023de:	2301      	movs	r3, #1
 80023e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e2:	f107 030c 	add.w	r3, r7, #12
 80023e6:	4619      	mov	r1, r3
 80023e8:	4804      	ldr	r0, [pc, #16]	; (80023fc <HAL_TIM_MspPostInit+0x6c>)
 80023ea:	f000 fac3 	bl	8002974 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80023ee:	bf00      	nop
 80023f0:	3720      	adds	r7, #32
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40020000 	.word	0x40020000

08002400 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <MX_USART2_UART_Init+0x4c>)
 8002406:	4a12      	ldr	r2, [pc, #72]	; (8002450 <MX_USART2_UART_Init+0x50>)
 8002408:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800240a:	4b10      	ldr	r3, [pc, #64]	; (800244c <MX_USART2_UART_Init+0x4c>)
 800240c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002410:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002412:	4b0e      	ldr	r3, [pc, #56]	; (800244c <MX_USART2_UART_Init+0x4c>)
 8002414:	2200      	movs	r2, #0
 8002416:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002418:	4b0c      	ldr	r3, [pc, #48]	; (800244c <MX_USART2_UART_Init+0x4c>)
 800241a:	2200      	movs	r2, #0
 800241c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800241e:	4b0b      	ldr	r3, [pc, #44]	; (800244c <MX_USART2_UART_Init+0x4c>)
 8002420:	2200      	movs	r2, #0
 8002422:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002424:	4b09      	ldr	r3, [pc, #36]	; (800244c <MX_USART2_UART_Init+0x4c>)
 8002426:	220c      	movs	r2, #12
 8002428:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800242a:	4b08      	ldr	r3, [pc, #32]	; (800244c <MX_USART2_UART_Init+0x4c>)
 800242c:	2200      	movs	r2, #0
 800242e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002430:	4b06      	ldr	r3, [pc, #24]	; (800244c <MX_USART2_UART_Init+0x4c>)
 8002432:	2200      	movs	r2, #0
 8002434:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002436:	4805      	ldr	r0, [pc, #20]	; (800244c <MX_USART2_UART_Init+0x4c>)
 8002438:	f002 f9f6 	bl	8004828 <HAL_UART_Init>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002442:	f7fe ff23 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20000260 	.word	0x20000260
 8002450:	40004400 	.word	0x40004400

08002454 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08a      	sub	sp, #40	; 0x28
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a1d      	ldr	r2, [pc, #116]	; (80024e8 <HAL_UART_MspInit+0x94>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d133      	bne.n	80024de <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <HAL_UART_MspInit+0x98>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	4a1b      	ldr	r2, [pc, #108]	; (80024ec <HAL_UART_MspInit+0x98>)
 8002480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002484:	6413      	str	r3, [r2, #64]	; 0x40
 8002486:	4b19      	ldr	r3, [pc, #100]	; (80024ec <HAL_UART_MspInit+0x98>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	4b15      	ldr	r3, [pc, #84]	; (80024ec <HAL_UART_MspInit+0x98>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	4a14      	ldr	r2, [pc, #80]	; (80024ec <HAL_UART_MspInit+0x98>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	6313      	str	r3, [r2, #48]	; 0x30
 80024a2:	4b12      	ldr	r3, [pc, #72]	; (80024ec <HAL_UART_MspInit+0x98>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024ae:	230c      	movs	r3, #12
 80024b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b2:	2302      	movs	r3, #2
 80024b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ba:	2303      	movs	r3, #3
 80024bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024be:	2307      	movs	r3, #7
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c2:	f107 0314 	add.w	r3, r7, #20
 80024c6:	4619      	mov	r1, r3
 80024c8:	4809      	ldr	r0, [pc, #36]	; (80024f0 <HAL_UART_MspInit+0x9c>)
 80024ca:	f000 fa53 	bl	8002974 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80024ce:	2200      	movs	r2, #0
 80024d0:	2100      	movs	r1, #0
 80024d2:	2026      	movs	r0, #38	; 0x26
 80024d4:	f000 f985 	bl	80027e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024d8:	2026      	movs	r0, #38	; 0x26
 80024da:	f000 f99e 	bl	800281a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80024de:	bf00      	nop
 80024e0:	3728      	adds	r7, #40	; 0x28
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40004400 	.word	0x40004400
 80024ec:	40023800 	.word	0x40023800
 80024f0:	40020000 	.word	0x40020000

080024f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80024f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800252c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024f8:	480d      	ldr	r0, [pc, #52]	; (8002530 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024fa:	490e      	ldr	r1, [pc, #56]	; (8002534 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024fc:	4a0e      	ldr	r2, [pc, #56]	; (8002538 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002500:	e002      	b.n	8002508 <LoopCopyDataInit>

08002502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002506:	3304      	adds	r3, #4

08002508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800250a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800250c:	d3f9      	bcc.n	8002502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800250e:	4a0b      	ldr	r2, [pc, #44]	; (800253c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002510:	4c0b      	ldr	r4, [pc, #44]	; (8002540 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002514:	e001      	b.n	800251a <LoopFillZerobss>

08002516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002518:	3204      	adds	r2, #4

0800251a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800251a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800251c:	d3fb      	bcc.n	8002516 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800251e:	f7ff fd91 	bl	8002044 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002522:	f003 f9ff 	bl	8005924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002526:	f7fe fc1f 	bl	8000d68 <main>
  bx  lr    
 800252a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800252c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002534:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002538:	08005c3c 	.word	0x08005c3c
  ldr r2, =_sbss
 800253c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002540:	200002b8 	.word	0x200002b8

08002544 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002544:	e7fe      	b.n	8002544 <ADC_IRQHandler>
	...

08002548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800254c:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <HAL_Init+0x40>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a0d      	ldr	r2, [pc, #52]	; (8002588 <HAL_Init+0x40>)
 8002552:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002556:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <HAL_Init+0x40>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <HAL_Init+0x40>)
 800255e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002562:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002564:	4b08      	ldr	r3, [pc, #32]	; (8002588 <HAL_Init+0x40>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a07      	ldr	r2, [pc, #28]	; (8002588 <HAL_Init+0x40>)
 800256a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002570:	2003      	movs	r0, #3
 8002572:	f000 f92b 	bl	80027cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002576:	200f      	movs	r0, #15
 8002578:	f000 f808 	bl	800258c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800257c:	f7ff fcc6 	bl	8001f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40023c00 	.word	0x40023c00

0800258c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002594:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_InitTick+0x54>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <HAL_InitTick+0x58>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	4619      	mov	r1, r3
 800259e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 f943 	bl	8002836 <HAL_SYSTICK_Config>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e00e      	b.n	80025d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b0f      	cmp	r3, #15
 80025be:	d80a      	bhi.n	80025d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025c0:	2200      	movs	r2, #0
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	f04f 30ff 	mov.w	r0, #4294967295
 80025c8:	f000 f90b 	bl	80027e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025cc:	4a06      	ldr	r2, [pc, #24]	; (80025e8 <HAL_InitTick+0x5c>)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e000      	b.n	80025d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20000008 	.word	0x20000008
 80025e4:	20000010 	.word	0x20000010
 80025e8:	2000000c 	.word	0x2000000c

080025ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_IncTick+0x20>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	461a      	mov	r2, r3
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_IncTick+0x24>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4413      	add	r3, r2
 80025fc:	4a04      	ldr	r2, [pc, #16]	; (8002610 <HAL_IncTick+0x24>)
 80025fe:	6013      	str	r3, [r2, #0]
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20000010 	.word	0x20000010
 8002610:	200002a4 	.word	0x200002a4

08002614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return uwTick;
 8002618:	4b03      	ldr	r3, [pc, #12]	; (8002628 <HAL_GetTick+0x14>)
 800261a:	681b      	ldr	r3, [r3, #0]
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	200002a4 	.word	0x200002a4

0800262c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <__NVIC_SetPriorityGrouping+0x44>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002648:	4013      	ands	r3, r2
 800264a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800265c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800265e:	4a04      	ldr	r2, [pc, #16]	; (8002670 <__NVIC_SetPriorityGrouping+0x44>)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	60d3      	str	r3, [r2, #12]
}
 8002664:	bf00      	nop
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002678:	4b04      	ldr	r3, [pc, #16]	; (800268c <__NVIC_GetPriorityGrouping+0x18>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	0a1b      	lsrs	r3, r3, #8
 800267e:	f003 0307 	and.w	r3, r3, #7
}
 8002682:	4618      	mov	r0, r3
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	db0b      	blt.n	80026ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	f003 021f 	and.w	r2, r3, #31
 80026a8:	4907      	ldr	r1, [pc, #28]	; (80026c8 <__NVIC_EnableIRQ+0x38>)
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	095b      	lsrs	r3, r3, #5
 80026b0:	2001      	movs	r0, #1
 80026b2:	fa00 f202 	lsl.w	r2, r0, r2
 80026b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	e000e100 	.word	0xe000e100

080026cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	6039      	str	r1, [r7, #0]
 80026d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	db0a      	blt.n	80026f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	490c      	ldr	r1, [pc, #48]	; (8002718 <__NVIC_SetPriority+0x4c>)
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	0112      	lsls	r2, r2, #4
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	440b      	add	r3, r1
 80026f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026f4:	e00a      	b.n	800270c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	4908      	ldr	r1, [pc, #32]	; (800271c <__NVIC_SetPriority+0x50>)
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	3b04      	subs	r3, #4
 8002704:	0112      	lsls	r2, r2, #4
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	440b      	add	r3, r1
 800270a:	761a      	strb	r2, [r3, #24]
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	e000e100 	.word	0xe000e100
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002720:	b480      	push	{r7}
 8002722:	b089      	sub	sp, #36	; 0x24
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f1c3 0307 	rsb	r3, r3, #7
 800273a:	2b04      	cmp	r3, #4
 800273c:	bf28      	it	cs
 800273e:	2304      	movcs	r3, #4
 8002740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	3304      	adds	r3, #4
 8002746:	2b06      	cmp	r3, #6
 8002748:	d902      	bls.n	8002750 <NVIC_EncodePriority+0x30>
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3b03      	subs	r3, #3
 800274e:	e000      	b.n	8002752 <NVIC_EncodePriority+0x32>
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002754:	f04f 32ff 	mov.w	r2, #4294967295
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43da      	mvns	r2, r3
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	401a      	ands	r2, r3
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002768:	f04f 31ff 	mov.w	r1, #4294967295
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	fa01 f303 	lsl.w	r3, r1, r3
 8002772:	43d9      	mvns	r1, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002778:	4313      	orrs	r3, r2
         );
}
 800277a:	4618      	mov	r0, r3
 800277c:	3724      	adds	r7, #36	; 0x24
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
	...

08002788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3b01      	subs	r3, #1
 8002794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002798:	d301      	bcc.n	800279e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800279a:	2301      	movs	r3, #1
 800279c:	e00f      	b.n	80027be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800279e:	4a0a      	ldr	r2, [pc, #40]	; (80027c8 <SysTick_Config+0x40>)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027a6:	210f      	movs	r1, #15
 80027a8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ac:	f7ff ff8e 	bl	80026cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <SysTick_Config+0x40>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027b6:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <SysTick_Config+0x40>)
 80027b8:	2207      	movs	r2, #7
 80027ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	e000e010 	.word	0xe000e010

080027cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f7ff ff29 	bl	800262c <__NVIC_SetPriorityGrouping>
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b086      	sub	sp, #24
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	4603      	mov	r3, r0
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	607a      	str	r2, [r7, #4]
 80027ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027f4:	f7ff ff3e 	bl	8002674 <__NVIC_GetPriorityGrouping>
 80027f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	68b9      	ldr	r1, [r7, #8]
 80027fe:	6978      	ldr	r0, [r7, #20]
 8002800:	f7ff ff8e 	bl	8002720 <NVIC_EncodePriority>
 8002804:	4602      	mov	r2, r0
 8002806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800280a:	4611      	mov	r1, r2
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff ff5d 	bl	80026cc <__NVIC_SetPriority>
}
 8002812:	bf00      	nop
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	4603      	mov	r3, r0
 8002822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ff31 	bl	8002690 <__NVIC_EnableIRQ>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7ff ffa2 	bl	8002788 <SysTick_Config>
 8002844:	4603      	mov	r3, r0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b084      	sub	sp, #16
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800285c:	f7ff feda 	bl	8002614 <HAL_GetTick>
 8002860:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d008      	beq.n	8002880 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2280      	movs	r2, #128	; 0x80
 8002872:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e052      	b.n	8002926 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0216 	bic.w	r2, r2, #22
 800288e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695a      	ldr	r2, [r3, #20]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800289e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d103      	bne.n	80028b0 <HAL_DMA_Abort+0x62>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d007      	beq.n	80028c0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0208 	bic.w	r2, r2, #8
 80028be:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0201 	bic.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028d0:	e013      	b.n	80028fa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028d2:	f7ff fe9f 	bl	8002614 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b05      	cmp	r3, #5
 80028de:	d90c      	bls.n	80028fa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2220      	movs	r2, #32
 80028e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2203      	movs	r2, #3
 80028ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e015      	b.n	8002926 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1e4      	bne.n	80028d2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290c:	223f      	movs	r2, #63	; 0x3f
 800290e:	409a      	lsls	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d004      	beq.n	800294c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2280      	movs	r2, #128	; 0x80
 8002946:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e00c      	b.n	8002966 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2205      	movs	r2, #5
 8002950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0201 	bic.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002974:	b480      	push	{r7}
 8002976:	b089      	sub	sp, #36	; 0x24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002982:	2300      	movs	r3, #0
 8002984:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002986:	2300      	movs	r3, #0
 8002988:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
 800298e:	e16b      	b.n	8002c68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002990:	2201      	movs	r2, #1
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	4013      	ands	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	f040 815a 	bne.w	8002c62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d005      	beq.n	80029c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d130      	bne.n	8002a28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	2203      	movs	r2, #3
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4013      	ands	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68da      	ldr	r2, [r3, #12]
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029fc:	2201      	movs	r2, #1
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	091b      	lsrs	r3, r3, #4
 8002a12:	f003 0201 	and.w	r2, r3, #1
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 0303 	and.w	r3, r3, #3
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d017      	beq.n	8002a64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	2203      	movs	r2, #3
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43db      	mvns	r3, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d123      	bne.n	8002ab8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	08da      	lsrs	r2, r3, #3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3208      	adds	r2, #8
 8002a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	220f      	movs	r2, #15
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	08da      	lsrs	r2, r3, #3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3208      	adds	r2, #8
 8002ab2:	69b9      	ldr	r1, [r7, #24]
 8002ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 0203 	and.w	r2, r3, #3
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 80b4 	beq.w	8002c62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	4b60      	ldr	r3, [pc, #384]	; (8002c80 <HAL_GPIO_Init+0x30c>)
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	4a5f      	ldr	r2, [pc, #380]	; (8002c80 <HAL_GPIO_Init+0x30c>)
 8002b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b08:	6453      	str	r3, [r2, #68]	; 0x44
 8002b0a:	4b5d      	ldr	r3, [pc, #372]	; (8002c80 <HAL_GPIO_Init+0x30c>)
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b16:	4a5b      	ldr	r2, [pc, #364]	; (8002c84 <HAL_GPIO_Init+0x310>)
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	089b      	lsrs	r3, r3, #2
 8002b1c:	3302      	adds	r3, #2
 8002b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	220f      	movs	r2, #15
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4013      	ands	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a52      	ldr	r2, [pc, #328]	; (8002c88 <HAL_GPIO_Init+0x314>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d02b      	beq.n	8002b9a <HAL_GPIO_Init+0x226>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a51      	ldr	r2, [pc, #324]	; (8002c8c <HAL_GPIO_Init+0x318>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d025      	beq.n	8002b96 <HAL_GPIO_Init+0x222>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a50      	ldr	r2, [pc, #320]	; (8002c90 <HAL_GPIO_Init+0x31c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d01f      	beq.n	8002b92 <HAL_GPIO_Init+0x21e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a4f      	ldr	r2, [pc, #316]	; (8002c94 <HAL_GPIO_Init+0x320>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d019      	beq.n	8002b8e <HAL_GPIO_Init+0x21a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a4e      	ldr	r2, [pc, #312]	; (8002c98 <HAL_GPIO_Init+0x324>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d013      	beq.n	8002b8a <HAL_GPIO_Init+0x216>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a4d      	ldr	r2, [pc, #308]	; (8002c9c <HAL_GPIO_Init+0x328>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d00d      	beq.n	8002b86 <HAL_GPIO_Init+0x212>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a4c      	ldr	r2, [pc, #304]	; (8002ca0 <HAL_GPIO_Init+0x32c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d007      	beq.n	8002b82 <HAL_GPIO_Init+0x20e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a4b      	ldr	r2, [pc, #300]	; (8002ca4 <HAL_GPIO_Init+0x330>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d101      	bne.n	8002b7e <HAL_GPIO_Init+0x20a>
 8002b7a:	2307      	movs	r3, #7
 8002b7c:	e00e      	b.n	8002b9c <HAL_GPIO_Init+0x228>
 8002b7e:	2308      	movs	r3, #8
 8002b80:	e00c      	b.n	8002b9c <HAL_GPIO_Init+0x228>
 8002b82:	2306      	movs	r3, #6
 8002b84:	e00a      	b.n	8002b9c <HAL_GPIO_Init+0x228>
 8002b86:	2305      	movs	r3, #5
 8002b88:	e008      	b.n	8002b9c <HAL_GPIO_Init+0x228>
 8002b8a:	2304      	movs	r3, #4
 8002b8c:	e006      	b.n	8002b9c <HAL_GPIO_Init+0x228>
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e004      	b.n	8002b9c <HAL_GPIO_Init+0x228>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e002      	b.n	8002b9c <HAL_GPIO_Init+0x228>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <HAL_GPIO_Init+0x228>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	69fa      	ldr	r2, [r7, #28]
 8002b9e:	f002 0203 	and.w	r2, r2, #3
 8002ba2:	0092      	lsls	r2, r2, #2
 8002ba4:	4093      	lsls	r3, r2
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bac:	4935      	ldr	r1, [pc, #212]	; (8002c84 <HAL_GPIO_Init+0x310>)
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	089b      	lsrs	r3, r3, #2
 8002bb2:	3302      	adds	r3, #2
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bba:	4b3b      	ldr	r3, [pc, #236]	; (8002ca8 <HAL_GPIO_Init+0x334>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bde:	4a32      	ldr	r2, [pc, #200]	; (8002ca8 <HAL_GPIO_Init+0x334>)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002be4:	4b30      	ldr	r3, [pc, #192]	; (8002ca8 <HAL_GPIO_Init+0x334>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	43db      	mvns	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c08:	4a27      	ldr	r2, [pc, #156]	; (8002ca8 <HAL_GPIO_Init+0x334>)
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c0e:	4b26      	ldr	r3, [pc, #152]	; (8002ca8 <HAL_GPIO_Init+0x334>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	43db      	mvns	r3, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c32:	4a1d      	ldr	r2, [pc, #116]	; (8002ca8 <HAL_GPIO_Init+0x334>)
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c38:	4b1b      	ldr	r3, [pc, #108]	; (8002ca8 <HAL_GPIO_Init+0x334>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	43db      	mvns	r3, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c5c:	4a12      	ldr	r2, [pc, #72]	; (8002ca8 <HAL_GPIO_Init+0x334>)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	3301      	adds	r3, #1
 8002c66:	61fb      	str	r3, [r7, #28]
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	2b0f      	cmp	r3, #15
 8002c6c:	f67f ae90 	bls.w	8002990 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop
 8002c74:	3724      	adds	r7, #36	; 0x24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40013800 	.word	0x40013800
 8002c88:	40020000 	.word	0x40020000
 8002c8c:	40020400 	.word	0x40020400
 8002c90:	40020800 	.word	0x40020800
 8002c94:	40020c00 	.word	0x40020c00
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40021400 	.word	0x40021400
 8002ca0:	40021800 	.word	0x40021800
 8002ca4:	40021c00 	.word	0x40021c00
 8002ca8:	40013c00 	.word	0x40013c00

08002cac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e267      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d075      	beq.n	8002db6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cca:	4b88      	ldr	r3, [pc, #544]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 030c 	and.w	r3, r3, #12
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d00c      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cd6:	4b85      	ldr	r3, [pc, #532]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d112      	bne.n	8002d08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ce2:	4b82      	ldr	r3, [pc, #520]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cee:	d10b      	bne.n	8002d08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf0:	4b7e      	ldr	r3, [pc, #504]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d05b      	beq.n	8002db4 <HAL_RCC_OscConfig+0x108>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d157      	bne.n	8002db4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e242      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d10:	d106      	bne.n	8002d20 <HAL_RCC_OscConfig+0x74>
 8002d12:	4b76      	ldr	r3, [pc, #472]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a75      	ldr	r2, [pc, #468]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	e01d      	b.n	8002d5c <HAL_RCC_OscConfig+0xb0>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d28:	d10c      	bne.n	8002d44 <HAL_RCC_OscConfig+0x98>
 8002d2a:	4b70      	ldr	r3, [pc, #448]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a6f      	ldr	r2, [pc, #444]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	4b6d      	ldr	r3, [pc, #436]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a6c      	ldr	r2, [pc, #432]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	e00b      	b.n	8002d5c <HAL_RCC_OscConfig+0xb0>
 8002d44:	4b69      	ldr	r3, [pc, #420]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a68      	ldr	r2, [pc, #416]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	4b66      	ldr	r3, [pc, #408]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a65      	ldr	r2, [pc, #404]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d013      	beq.n	8002d8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7ff fc56 	bl	8002614 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d6c:	f7ff fc52 	bl	8002614 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b64      	cmp	r3, #100	; 0x64
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e207      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7e:	4b5b      	ldr	r3, [pc, #364]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0xc0>
 8002d8a:	e014      	b.n	8002db6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8c:	f7ff fc42 	bl	8002614 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d94:	f7ff fc3e 	bl	8002614 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b64      	cmp	r3, #100	; 0x64
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e1f3      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da6:	4b51      	ldr	r3, [pc, #324]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f0      	bne.n	8002d94 <HAL_RCC_OscConfig+0xe8>
 8002db2:	e000      	b.n	8002db6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d063      	beq.n	8002e8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dc2:	4b4a      	ldr	r3, [pc, #296]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00b      	beq.n	8002de6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dce:	4b47      	ldr	r3, [pc, #284]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dd6:	2b08      	cmp	r3, #8
 8002dd8:	d11c      	bne.n	8002e14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dda:	4b44      	ldr	r3, [pc, #272]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d116      	bne.n	8002e14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de6:	4b41      	ldr	r3, [pc, #260]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d005      	beq.n	8002dfe <HAL_RCC_OscConfig+0x152>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d001      	beq.n	8002dfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e1c7      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfe:	4b3b      	ldr	r3, [pc, #236]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	4937      	ldr	r1, [pc, #220]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e12:	e03a      	b.n	8002e8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d020      	beq.n	8002e5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e1c:	4b34      	ldr	r3, [pc, #208]	; (8002ef0 <HAL_RCC_OscConfig+0x244>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e22:	f7ff fbf7 	bl	8002614 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e2a:	f7ff fbf3 	bl	8002614 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e1a8      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3c:	4b2b      	ldr	r3, [pc, #172]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f0      	beq.n	8002e2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e48:	4b28      	ldr	r3, [pc, #160]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4925      	ldr	r1, [pc, #148]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	600b      	str	r3, [r1, #0]
 8002e5c:	e015      	b.n	8002e8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e5e:	4b24      	ldr	r3, [pc, #144]	; (8002ef0 <HAL_RCC_OscConfig+0x244>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7ff fbd6 	bl	8002614 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e6c:	f7ff fbd2 	bl	8002614 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e187      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7e:	4b1b      	ldr	r3, [pc, #108]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d036      	beq.n	8002f04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d016      	beq.n	8002ecc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e9e:	4b15      	ldr	r3, [pc, #84]	; (8002ef4 <HAL_RCC_OscConfig+0x248>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea4:	f7ff fbb6 	bl	8002614 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eac:	f7ff fbb2 	bl	8002614 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e167      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ebe:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <HAL_RCC_OscConfig+0x240>)
 8002ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0x200>
 8002eca:	e01b      	b.n	8002f04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ecc:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <HAL_RCC_OscConfig+0x248>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed2:	f7ff fb9f 	bl	8002614 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed8:	e00e      	b.n	8002ef8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eda:	f7ff fb9b 	bl	8002614 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d907      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e150      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	42470000 	.word	0x42470000
 8002ef4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef8:	4b88      	ldr	r3, [pc, #544]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1ea      	bne.n	8002eda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 8097 	beq.w	8003040 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f12:	2300      	movs	r3, #0
 8002f14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f16:	4b81      	ldr	r3, [pc, #516]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10f      	bne.n	8002f42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f22:	2300      	movs	r3, #0
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	4b7d      	ldr	r3, [pc, #500]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	4a7c      	ldr	r2, [pc, #496]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f30:	6413      	str	r3, [r2, #64]	; 0x40
 8002f32:	4b7a      	ldr	r3, [pc, #488]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	60bb      	str	r3, [r7, #8]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f42:	4b77      	ldr	r3, [pc, #476]	; (8003120 <HAL_RCC_OscConfig+0x474>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d118      	bne.n	8002f80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f4e:	4b74      	ldr	r3, [pc, #464]	; (8003120 <HAL_RCC_OscConfig+0x474>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a73      	ldr	r2, [pc, #460]	; (8003120 <HAL_RCC_OscConfig+0x474>)
 8002f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f5a:	f7ff fb5b 	bl	8002614 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f62:	f7ff fb57 	bl	8002614 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e10c      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f74:	4b6a      	ldr	r3, [pc, #424]	; (8003120 <HAL_RCC_OscConfig+0x474>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0f0      	beq.n	8002f62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d106      	bne.n	8002f96 <HAL_RCC_OscConfig+0x2ea>
 8002f88:	4b64      	ldr	r3, [pc, #400]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8c:	4a63      	ldr	r2, [pc, #396]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	6713      	str	r3, [r2, #112]	; 0x70
 8002f94:	e01c      	b.n	8002fd0 <HAL_RCC_OscConfig+0x324>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2b05      	cmp	r3, #5
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x30c>
 8002f9e:	4b5f      	ldr	r3, [pc, #380]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa2:	4a5e      	ldr	r2, [pc, #376]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002fa4:	f043 0304 	orr.w	r3, r3, #4
 8002fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8002faa:	4b5c      	ldr	r3, [pc, #368]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fae:	4a5b      	ldr	r2, [pc, #364]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002fb0:	f043 0301 	orr.w	r3, r3, #1
 8002fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb6:	e00b      	b.n	8002fd0 <HAL_RCC_OscConfig+0x324>
 8002fb8:	4b58      	ldr	r3, [pc, #352]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbc:	4a57      	ldr	r2, [pc, #348]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002fbe:	f023 0301 	bic.w	r3, r3, #1
 8002fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc4:	4b55      	ldr	r3, [pc, #340]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc8:	4a54      	ldr	r2, [pc, #336]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002fca:	f023 0304 	bic.w	r3, r3, #4
 8002fce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d015      	beq.n	8003004 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd8:	f7ff fb1c 	bl	8002614 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fde:	e00a      	b.n	8002ff6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fe0:	f7ff fb18 	bl	8002614 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e0cb      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff6:	4b49      	ldr	r3, [pc, #292]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8002ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0ee      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x334>
 8003002:	e014      	b.n	800302e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003004:	f7ff fb06 	bl	8002614 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800300a:	e00a      	b.n	8003022 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800300c:	f7ff fb02 	bl	8002614 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	f241 3288 	movw	r2, #5000	; 0x1388
 800301a:	4293      	cmp	r3, r2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e0b5      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003022:	4b3e      	ldr	r3, [pc, #248]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1ee      	bne.n	800300c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800302e:	7dfb      	ldrb	r3, [r7, #23]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d105      	bne.n	8003040 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003034:	4b39      	ldr	r3, [pc, #228]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	4a38      	ldr	r2, [pc, #224]	; (800311c <HAL_RCC_OscConfig+0x470>)
 800303a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800303e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80a1 	beq.w	800318c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800304a:	4b34      	ldr	r3, [pc, #208]	; (800311c <HAL_RCC_OscConfig+0x470>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	2b08      	cmp	r3, #8
 8003054:	d05c      	beq.n	8003110 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d141      	bne.n	80030e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305e:	4b31      	ldr	r3, [pc, #196]	; (8003124 <HAL_RCC_OscConfig+0x478>)
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7ff fad6 	bl	8002614 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800306c:	f7ff fad2 	bl	8002614 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e087      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307e:	4b27      	ldr	r3, [pc, #156]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69da      	ldr	r2, [r3, #28]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	019b      	lsls	r3, r3, #6
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a0:	085b      	lsrs	r3, r3, #1
 80030a2:	3b01      	subs	r3, #1
 80030a4:	041b      	lsls	r3, r3, #16
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	061b      	lsls	r3, r3, #24
 80030ae:	491b      	ldr	r1, [pc, #108]	; (800311c <HAL_RCC_OscConfig+0x470>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b4:	4b1b      	ldr	r3, [pc, #108]	; (8003124 <HAL_RCC_OscConfig+0x478>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ba:	f7ff faab 	bl	8002614 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c2:	f7ff faa7 	bl	8002614 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e05c      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d4:	4b11      	ldr	r3, [pc, #68]	; (800311c <HAL_RCC_OscConfig+0x470>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0f0      	beq.n	80030c2 <HAL_RCC_OscConfig+0x416>
 80030e0:	e054      	b.n	800318c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e2:	4b10      	ldr	r3, [pc, #64]	; (8003124 <HAL_RCC_OscConfig+0x478>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e8:	f7ff fa94 	bl	8002614 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f0:	f7ff fa90 	bl	8002614 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e045      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003102:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_RCC_OscConfig+0x470>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_OscConfig+0x444>
 800310e:	e03d      	b.n	800318c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d107      	bne.n	8003128 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e038      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
 800311c:	40023800 	.word	0x40023800
 8003120:	40007000 	.word	0x40007000
 8003124:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003128:	4b1b      	ldr	r3, [pc, #108]	; (8003198 <HAL_RCC_OscConfig+0x4ec>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d028      	beq.n	8003188 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003140:	429a      	cmp	r2, r3
 8003142:	d121      	bne.n	8003188 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314e:	429a      	cmp	r2, r3
 8003150:	d11a      	bne.n	8003188 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003158:	4013      	ands	r3, r2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800315e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003160:	4293      	cmp	r3, r2
 8003162:	d111      	bne.n	8003188 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316e:	085b      	lsrs	r3, r3, #1
 8003170:	3b01      	subs	r3, #1
 8003172:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003174:	429a      	cmp	r2, r3
 8003176:	d107      	bne.n	8003188 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003182:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003184:	429a      	cmp	r2, r3
 8003186:	d001      	beq.n	800318c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40023800 	.word	0x40023800

0800319c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e0cc      	b.n	800334a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031b0:	4b68      	ldr	r3, [pc, #416]	; (8003354 <HAL_RCC_ClockConfig+0x1b8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d90c      	bls.n	80031d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031be:	4b65      	ldr	r3, [pc, #404]	; (8003354 <HAL_RCC_ClockConfig+0x1b8>)
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c6:	4b63      	ldr	r3, [pc, #396]	; (8003354 <HAL_RCC_ClockConfig+0x1b8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d001      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e0b8      	b.n	800334a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d020      	beq.n	8003226 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d005      	beq.n	80031fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031f0:	4b59      	ldr	r3, [pc, #356]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	4a58      	ldr	r2, [pc, #352]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0308 	and.w	r3, r3, #8
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003208:	4b53      	ldr	r3, [pc, #332]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	4a52      	ldr	r2, [pc, #328]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003212:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003214:	4b50      	ldr	r3, [pc, #320]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	494d      	ldr	r1, [pc, #308]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	4313      	orrs	r3, r2
 8003224:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d044      	beq.n	80032bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d107      	bne.n	800324a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800323a:	4b47      	ldr	r3, [pc, #284]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d119      	bne.n	800327a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e07f      	b.n	800334a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d003      	beq.n	800325a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003256:	2b03      	cmp	r3, #3
 8003258:	d107      	bne.n	800326a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800325a:	4b3f      	ldr	r3, [pc, #252]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d109      	bne.n	800327a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e06f      	b.n	800334a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800326a:	4b3b      	ldr	r3, [pc, #236]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e067      	b.n	800334a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800327a:	4b37      	ldr	r3, [pc, #220]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f023 0203 	bic.w	r2, r3, #3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	4934      	ldr	r1, [pc, #208]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 8003288:	4313      	orrs	r3, r2
 800328a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800328c:	f7ff f9c2 	bl	8002614 <HAL_GetTick>
 8003290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003292:	e00a      	b.n	80032aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003294:	f7ff f9be 	bl	8002614 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e04f      	b.n	800334a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032aa:	4b2b      	ldr	r3, [pc, #172]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 020c 	and.w	r2, r3, #12
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d1eb      	bne.n	8003294 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032bc:	4b25      	ldr	r3, [pc, #148]	; (8003354 <HAL_RCC_ClockConfig+0x1b8>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d20c      	bcs.n	80032e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ca:	4b22      	ldr	r3, [pc, #136]	; (8003354 <HAL_RCC_ClockConfig+0x1b8>)
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d2:	4b20      	ldr	r3, [pc, #128]	; (8003354 <HAL_RCC_ClockConfig+0x1b8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d001      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e032      	b.n	800334a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d008      	beq.n	8003302 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032f0:	4b19      	ldr	r3, [pc, #100]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	4916      	ldr	r1, [pc, #88]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0308 	and.w	r3, r3, #8
 800330a:	2b00      	cmp	r3, #0
 800330c:	d009      	beq.n	8003322 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800330e:	4b12      	ldr	r3, [pc, #72]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	490e      	ldr	r1, [pc, #56]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800331e:	4313      	orrs	r3, r2
 8003320:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003322:	f000 f821 	bl	8003368 <HAL_RCC_GetSysClockFreq>
 8003326:	4602      	mov	r2, r0
 8003328:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	091b      	lsrs	r3, r3, #4
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	490a      	ldr	r1, [pc, #40]	; (800335c <HAL_RCC_ClockConfig+0x1c0>)
 8003334:	5ccb      	ldrb	r3, [r1, r3]
 8003336:	fa22 f303 	lsr.w	r3, r2, r3
 800333a:	4a09      	ldr	r2, [pc, #36]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 800333c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800333e:	4b09      	ldr	r3, [pc, #36]	; (8003364 <HAL_RCC_ClockConfig+0x1c8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff f922 	bl	800258c <HAL_InitTick>

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40023c00 	.word	0x40023c00
 8003358:	40023800 	.word	0x40023800
 800335c:	08005c14 	.word	0x08005c14
 8003360:	20000008 	.word	0x20000008
 8003364:	2000000c 	.word	0x2000000c

08003368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800336c:	b090      	sub	sp, #64	; 0x40
 800336e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	637b      	str	r3, [r7, #52]	; 0x34
 8003374:	2300      	movs	r3, #0
 8003376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003378:	2300      	movs	r3, #0
 800337a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003380:	4b59      	ldr	r3, [pc, #356]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 030c 	and.w	r3, r3, #12
 8003388:	2b08      	cmp	r3, #8
 800338a:	d00d      	beq.n	80033a8 <HAL_RCC_GetSysClockFreq+0x40>
 800338c:	2b08      	cmp	r3, #8
 800338e:	f200 80a1 	bhi.w	80034d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <HAL_RCC_GetSysClockFreq+0x34>
 8003396:	2b04      	cmp	r3, #4
 8003398:	d003      	beq.n	80033a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800339a:	e09b      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800339c:	4b53      	ldr	r3, [pc, #332]	; (80034ec <HAL_RCC_GetSysClockFreq+0x184>)
 800339e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80033a0:	e09b      	b.n	80034da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033a2:	4b53      	ldr	r3, [pc, #332]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80033a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033a6:	e098      	b.n	80034da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033a8:	4b4f      	ldr	r3, [pc, #316]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033b0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033b2:	4b4d      	ldr	r3, [pc, #308]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d028      	beq.n	8003410 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033be:	4b4a      	ldr	r3, [pc, #296]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	099b      	lsrs	r3, r3, #6
 80033c4:	2200      	movs	r2, #0
 80033c6:	623b      	str	r3, [r7, #32]
 80033c8:	627a      	str	r2, [r7, #36]	; 0x24
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033d0:	2100      	movs	r1, #0
 80033d2:	4b47      	ldr	r3, [pc, #284]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80033d4:	fb03 f201 	mul.w	r2, r3, r1
 80033d8:	2300      	movs	r3, #0
 80033da:	fb00 f303 	mul.w	r3, r0, r3
 80033de:	4413      	add	r3, r2
 80033e0:	4a43      	ldr	r2, [pc, #268]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80033e2:	fba0 1202 	umull	r1, r2, r0, r2
 80033e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033e8:	460a      	mov	r2, r1
 80033ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80033ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033ee:	4413      	add	r3, r2
 80033f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f4:	2200      	movs	r2, #0
 80033f6:	61bb      	str	r3, [r7, #24]
 80033f8:	61fa      	str	r2, [r7, #28]
 80033fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003402:	f7fd fb07 	bl	8000a14 <__aeabi_uldivmod>
 8003406:	4602      	mov	r2, r0
 8003408:	460b      	mov	r3, r1
 800340a:	4613      	mov	r3, r2
 800340c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800340e:	e053      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003410:	4b35      	ldr	r3, [pc, #212]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	099b      	lsrs	r3, r3, #6
 8003416:	2200      	movs	r2, #0
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	617a      	str	r2, [r7, #20]
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003422:	f04f 0b00 	mov.w	fp, #0
 8003426:	4652      	mov	r2, sl
 8003428:	465b      	mov	r3, fp
 800342a:	f04f 0000 	mov.w	r0, #0
 800342e:	f04f 0100 	mov.w	r1, #0
 8003432:	0159      	lsls	r1, r3, #5
 8003434:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003438:	0150      	lsls	r0, r2, #5
 800343a:	4602      	mov	r2, r0
 800343c:	460b      	mov	r3, r1
 800343e:	ebb2 080a 	subs.w	r8, r2, sl
 8003442:	eb63 090b 	sbc.w	r9, r3, fp
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003452:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003456:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800345a:	ebb2 0408 	subs.w	r4, r2, r8
 800345e:	eb63 0509 	sbc.w	r5, r3, r9
 8003462:	f04f 0200 	mov.w	r2, #0
 8003466:	f04f 0300 	mov.w	r3, #0
 800346a:	00eb      	lsls	r3, r5, #3
 800346c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003470:	00e2      	lsls	r2, r4, #3
 8003472:	4614      	mov	r4, r2
 8003474:	461d      	mov	r5, r3
 8003476:	eb14 030a 	adds.w	r3, r4, sl
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	eb45 030b 	adc.w	r3, r5, fp
 8003480:	607b      	str	r3, [r7, #4]
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	f04f 0300 	mov.w	r3, #0
 800348a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800348e:	4629      	mov	r1, r5
 8003490:	028b      	lsls	r3, r1, #10
 8003492:	4621      	mov	r1, r4
 8003494:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003498:	4621      	mov	r1, r4
 800349a:	028a      	lsls	r2, r1, #10
 800349c:	4610      	mov	r0, r2
 800349e:	4619      	mov	r1, r3
 80034a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a2:	2200      	movs	r2, #0
 80034a4:	60bb      	str	r3, [r7, #8]
 80034a6:	60fa      	str	r2, [r7, #12]
 80034a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034ac:	f7fd fab2 	bl	8000a14 <__aeabi_uldivmod>
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4613      	mov	r3, r2
 80034b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034b8:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	0c1b      	lsrs	r3, r3, #16
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	3301      	adds	r3, #1
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80034c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034d2:	e002      	b.n	80034da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034d4:	4b05      	ldr	r3, [pc, #20]	; (80034ec <HAL_RCC_GetSysClockFreq+0x184>)
 80034d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3740      	adds	r7, #64	; 0x40
 80034e0:	46bd      	mov	sp, r7
 80034e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034e6:	bf00      	nop
 80034e8:	40023800 	.word	0x40023800
 80034ec:	00f42400 	.word	0x00f42400
 80034f0:	017d7840 	.word	0x017d7840

080034f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034f8:	4b03      	ldr	r3, [pc, #12]	; (8003508 <HAL_RCC_GetHCLKFreq+0x14>)
 80034fa:	681b      	ldr	r3, [r3, #0]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	20000008 	.word	0x20000008

0800350c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003510:	f7ff fff0 	bl	80034f4 <HAL_RCC_GetHCLKFreq>
 8003514:	4602      	mov	r2, r0
 8003516:	4b05      	ldr	r3, [pc, #20]	; (800352c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	0a9b      	lsrs	r3, r3, #10
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	4903      	ldr	r1, [pc, #12]	; (8003530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003522:	5ccb      	ldrb	r3, [r1, r3]
 8003524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003528:	4618      	mov	r0, r3
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40023800 	.word	0x40023800
 8003530:	08005c24 	.word	0x08005c24

08003534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003538:	f7ff ffdc 	bl	80034f4 <HAL_RCC_GetHCLKFreq>
 800353c:	4602      	mov	r2, r0
 800353e:	4b05      	ldr	r3, [pc, #20]	; (8003554 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	0b5b      	lsrs	r3, r3, #13
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	4903      	ldr	r1, [pc, #12]	; (8003558 <HAL_RCC_GetPCLK2Freq+0x24>)
 800354a:	5ccb      	ldrb	r3, [r1, r3]
 800354c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003550:	4618      	mov	r0, r3
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40023800 	.word	0x40023800
 8003558:	08005c24 	.word	0x08005c24

0800355c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e041      	b.n	80035f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d106      	bne.n	8003588 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7fe fedc 	bl	8002340 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3304      	adds	r3, #4
 8003598:	4619      	mov	r1, r3
 800359a:	4610      	mov	r0, r2
 800359c:	f000 fda4 	bl	80040e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
	...

080035fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b01      	cmp	r3, #1
 800360e:	d001      	beq.n	8003614 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e04e      	b.n	80036b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0201 	orr.w	r2, r2, #1
 800362a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a23      	ldr	r2, [pc, #140]	; (80036c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d022      	beq.n	800367c <HAL_TIM_Base_Start_IT+0x80>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363e:	d01d      	beq.n	800367c <HAL_TIM_Base_Start_IT+0x80>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a1f      	ldr	r2, [pc, #124]	; (80036c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d018      	beq.n	800367c <HAL_TIM_Base_Start_IT+0x80>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a1e      	ldr	r2, [pc, #120]	; (80036c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d013      	beq.n	800367c <HAL_TIM_Base_Start_IT+0x80>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a1c      	ldr	r2, [pc, #112]	; (80036cc <HAL_TIM_Base_Start_IT+0xd0>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00e      	beq.n	800367c <HAL_TIM_Base_Start_IT+0x80>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a1b      	ldr	r2, [pc, #108]	; (80036d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d009      	beq.n	800367c <HAL_TIM_Base_Start_IT+0x80>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a19      	ldr	r2, [pc, #100]	; (80036d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d004      	beq.n	800367c <HAL_TIM_Base_Start_IT+0x80>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a18      	ldr	r2, [pc, #96]	; (80036d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d111      	bne.n	80036a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b06      	cmp	r3, #6
 800368c:	d010      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f042 0201 	orr.w	r2, r2, #1
 800369c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800369e:	e007      	b.n	80036b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0201 	orr.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40010000 	.word	0x40010000
 80036c4:	40000400 	.word	0x40000400
 80036c8:	40000800 	.word	0x40000800
 80036cc:	40000c00 	.word	0x40000c00
 80036d0:	40010400 	.word	0x40010400
 80036d4:	40014000 	.word	0x40014000
 80036d8:	40001800 	.word	0x40001800

080036dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e041      	b.n	8003772 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7fe fdb4 	bl	8002270 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3304      	adds	r3, #4
 8003718:	4619      	mov	r1, r3
 800371a:	4610      	mov	r0, r2
 800371c:	f000 fce4 	bl	80040e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d109      	bne.n	80037a0 <HAL_TIM_PWM_Start+0x24>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b01      	cmp	r3, #1
 8003796:	bf14      	ite	ne
 8003798:	2301      	movne	r3, #1
 800379a:	2300      	moveq	r3, #0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	e022      	b.n	80037e6 <HAL_TIM_PWM_Start+0x6a>
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d109      	bne.n	80037ba <HAL_TIM_PWM_Start+0x3e>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	bf14      	ite	ne
 80037b2:	2301      	movne	r3, #1
 80037b4:	2300      	moveq	r3, #0
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	e015      	b.n	80037e6 <HAL_TIM_PWM_Start+0x6a>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d109      	bne.n	80037d4 <HAL_TIM_PWM_Start+0x58>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	bf14      	ite	ne
 80037cc:	2301      	movne	r3, #1
 80037ce:	2300      	moveq	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	e008      	b.n	80037e6 <HAL_TIM_PWM_Start+0x6a>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b01      	cmp	r3, #1
 80037de:	bf14      	ite	ne
 80037e0:	2301      	movne	r3, #1
 80037e2:	2300      	moveq	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e07c      	b.n	80038e8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d104      	bne.n	80037fe <HAL_TIM_PWM_Start+0x82>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037fc:	e013      	b.n	8003826 <HAL_TIM_PWM_Start+0xaa>
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2b04      	cmp	r3, #4
 8003802:	d104      	bne.n	800380e <HAL_TIM_PWM_Start+0x92>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800380c:	e00b      	b.n	8003826 <HAL_TIM_PWM_Start+0xaa>
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b08      	cmp	r3, #8
 8003812:	d104      	bne.n	800381e <HAL_TIM_PWM_Start+0xa2>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800381c:	e003      	b.n	8003826 <HAL_TIM_PWM_Start+0xaa>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2202      	movs	r2, #2
 8003822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2201      	movs	r2, #1
 800382c:	6839      	ldr	r1, [r7, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f000 ff44 	bl	80046bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a2d      	ldr	r2, [pc, #180]	; (80038f0 <HAL_TIM_PWM_Start+0x174>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d004      	beq.n	8003848 <HAL_TIM_PWM_Start+0xcc>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a2c      	ldr	r2, [pc, #176]	; (80038f4 <HAL_TIM_PWM_Start+0x178>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d101      	bne.n	800384c <HAL_TIM_PWM_Start+0xd0>
 8003848:	2301      	movs	r3, #1
 800384a:	e000      	b.n	800384e <HAL_TIM_PWM_Start+0xd2>
 800384c:	2300      	movs	r3, #0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d007      	beq.n	8003862 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003860:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a22      	ldr	r2, [pc, #136]	; (80038f0 <HAL_TIM_PWM_Start+0x174>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d022      	beq.n	80038b2 <HAL_TIM_PWM_Start+0x136>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003874:	d01d      	beq.n	80038b2 <HAL_TIM_PWM_Start+0x136>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a1f      	ldr	r2, [pc, #124]	; (80038f8 <HAL_TIM_PWM_Start+0x17c>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d018      	beq.n	80038b2 <HAL_TIM_PWM_Start+0x136>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a1d      	ldr	r2, [pc, #116]	; (80038fc <HAL_TIM_PWM_Start+0x180>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d013      	beq.n	80038b2 <HAL_TIM_PWM_Start+0x136>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a1c      	ldr	r2, [pc, #112]	; (8003900 <HAL_TIM_PWM_Start+0x184>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d00e      	beq.n	80038b2 <HAL_TIM_PWM_Start+0x136>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a16      	ldr	r2, [pc, #88]	; (80038f4 <HAL_TIM_PWM_Start+0x178>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d009      	beq.n	80038b2 <HAL_TIM_PWM_Start+0x136>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a18      	ldr	r2, [pc, #96]	; (8003904 <HAL_TIM_PWM_Start+0x188>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d004      	beq.n	80038b2 <HAL_TIM_PWM_Start+0x136>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a16      	ldr	r2, [pc, #88]	; (8003908 <HAL_TIM_PWM_Start+0x18c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d111      	bne.n	80038d6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b06      	cmp	r3, #6
 80038c2:	d010      	beq.n	80038e6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0201 	orr.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d4:	e007      	b.n	80038e6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f042 0201 	orr.w	r2, r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40010000 	.word	0x40010000
 80038f4:	40010400 	.word	0x40010400
 80038f8:	40000400 	.word	0x40000400
 80038fc:	40000800 	.word	0x40000800
 8003900:	40000c00 	.word	0x40000c00
 8003904:	40014000 	.word	0x40014000
 8003908:	40001800 	.word	0x40001800

0800390c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e097      	b.n	8003a50 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d106      	bne.n	800393a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7fe fcbb 	bl	80022b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2202      	movs	r2, #2
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003950:	f023 0307 	bic.w	r3, r3, #7
 8003954:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3304      	adds	r3, #4
 800395e:	4619      	mov	r1, r3
 8003960:	4610      	mov	r0, r2
 8003962:	f000 fbc1 	bl	80040e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800398e:	f023 0303 	bic.w	r3, r3, #3
 8003992:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	021b      	lsls	r3, r3, #8
 800399e:	4313      	orrs	r3, r2
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80039ac:	f023 030c 	bic.w	r3, r3, #12
 80039b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	021b      	lsls	r3, r3, #8
 80039c8:	4313      	orrs	r3, r2
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	011a      	lsls	r2, r3, #4
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	031b      	lsls	r3, r3, #12
 80039dc:	4313      	orrs	r3, r2
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80039ea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80039f2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	4313      	orrs	r3, r2
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a68:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a70:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a78:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003a80:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d110      	bne.n	8003aaa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d102      	bne.n	8003a94 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a8e:	7b7b      	ldrb	r3, [r7, #13]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d001      	beq.n	8003a98 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e069      	b.n	8003b6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aa8:	e031      	b.n	8003b0e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d110      	bne.n	8003ad2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ab0:	7bbb      	ldrb	r3, [r7, #14]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d102      	bne.n	8003abc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ab6:	7b3b      	ldrb	r3, [r7, #12]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d001      	beq.n	8003ac0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e055      	b.n	8003b6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ad0:	e01d      	b.n	8003b0e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d108      	bne.n	8003aea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ad8:	7bbb      	ldrb	r3, [r7, #14]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d105      	bne.n	8003aea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ade:	7b7b      	ldrb	r3, [r7, #13]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d102      	bne.n	8003aea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ae4:	7b3b      	ldrb	r3, [r7, #12]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d001      	beq.n	8003aee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e03e      	b.n	8003b6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2202      	movs	r2, #2
 8003af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2202      	movs	r2, #2
 8003afa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2202      	movs	r2, #2
 8003b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2202      	movs	r2, #2
 8003b0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_TIM_Encoder_Start+0xc4>
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d008      	beq.n	8003b2c <HAL_TIM_Encoder_Start+0xd4>
 8003b1a:	e00f      	b.n	8003b3c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2201      	movs	r2, #1
 8003b22:	2100      	movs	r1, #0
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 fdc9 	bl	80046bc <TIM_CCxChannelCmd>
      break;
 8003b2a:	e016      	b.n	8003b5a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2201      	movs	r2, #1
 8003b32:	2104      	movs	r1, #4
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 fdc1 	bl	80046bc <TIM_CCxChannelCmd>
      break;
 8003b3a:	e00e      	b.n	8003b5a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2201      	movs	r2, #1
 8003b42:	2100      	movs	r1, #0
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 fdb9 	bl	80046bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	2104      	movs	r1, #4
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 fdb2 	bl	80046bc <TIM_CCxChannelCmd>
      break;
 8003b58:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f042 0201 	orr.w	r2, r2, #1
 8003b68:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d122      	bne.n	8003bd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d11b      	bne.n	8003bd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f06f 0202 	mvn.w	r2, #2
 8003ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 fa77 	bl	80040aa <HAL_TIM_IC_CaptureCallback>
 8003bbc:	e005      	b.n	8003bca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fa69 	bl	8004096 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 fa7a 	bl	80040be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d122      	bne.n	8003c24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d11b      	bne.n	8003c24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f06f 0204 	mvn.w	r2, #4
 8003bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 fa4d 	bl	80040aa <HAL_TIM_IC_CaptureCallback>
 8003c10:	e005      	b.n	8003c1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fa3f 	bl	8004096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 fa50 	bl	80040be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d122      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f003 0308 	and.w	r3, r3, #8
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d11b      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f06f 0208 	mvn.w	r2, #8
 8003c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2204      	movs	r2, #4
 8003c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 fa23 	bl	80040aa <HAL_TIM_IC_CaptureCallback>
 8003c64:	e005      	b.n	8003c72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fa15 	bl	8004096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 fa26 	bl	80040be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	f003 0310 	and.w	r3, r3, #16
 8003c82:	2b10      	cmp	r3, #16
 8003c84:	d122      	bne.n	8003ccc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f003 0310 	and.w	r3, r3, #16
 8003c90:	2b10      	cmp	r3, #16
 8003c92:	d11b      	bne.n	8003ccc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f06f 0210 	mvn.w	r2, #16
 8003c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2208      	movs	r2, #8
 8003ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f9f9 	bl	80040aa <HAL_TIM_IC_CaptureCallback>
 8003cb8:	e005      	b.n	8003cc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f9eb 	bl	8004096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f9fc 	bl	80040be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d10e      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d107      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f06f 0201 	mvn.w	r2, #1
 8003cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7fd f9b2 	bl	800105c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d02:	2b80      	cmp	r3, #128	; 0x80
 8003d04:	d10e      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d10:	2b80      	cmp	r3, #128	; 0x80
 8003d12:	d107      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fd78 	bl	8004814 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2e:	2b40      	cmp	r3, #64	; 0x40
 8003d30:	d10e      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3c:	2b40      	cmp	r3, #64	; 0x40
 8003d3e:	d107      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f9c1 	bl	80040d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f003 0320 	and.w	r3, r3, #32
 8003d5a:	2b20      	cmp	r3, #32
 8003d5c:	d10e      	bne.n	8003d7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f003 0320 	and.w	r3, r3, #32
 8003d68:	2b20      	cmp	r3, #32
 8003d6a:	d107      	bne.n	8003d7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0220 	mvn.w	r2, #32
 8003d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 fd42 	bl	8004800 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d7c:	bf00      	nop
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d90:	2300      	movs	r3, #0
 8003d92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d101      	bne.n	8003da2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	e0ae      	b.n	8003f00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b0c      	cmp	r3, #12
 8003dae:	f200 809f 	bhi.w	8003ef0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003db2:	a201      	add	r2, pc, #4	; (adr r2, 8003db8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db8:	08003ded 	.word	0x08003ded
 8003dbc:	08003ef1 	.word	0x08003ef1
 8003dc0:	08003ef1 	.word	0x08003ef1
 8003dc4:	08003ef1 	.word	0x08003ef1
 8003dc8:	08003e2d 	.word	0x08003e2d
 8003dcc:	08003ef1 	.word	0x08003ef1
 8003dd0:	08003ef1 	.word	0x08003ef1
 8003dd4:	08003ef1 	.word	0x08003ef1
 8003dd8:	08003e6f 	.word	0x08003e6f
 8003ddc:	08003ef1 	.word	0x08003ef1
 8003de0:	08003ef1 	.word	0x08003ef1
 8003de4:	08003ef1 	.word	0x08003ef1
 8003de8:	08003eaf 	.word	0x08003eaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68b9      	ldr	r1, [r7, #8]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fa18 	bl	8004228 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699a      	ldr	r2, [r3, #24]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0208 	orr.w	r2, r2, #8
 8003e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699a      	ldr	r2, [r3, #24]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0204 	bic.w	r2, r2, #4
 8003e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6999      	ldr	r1, [r3, #24]
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	691a      	ldr	r2, [r3, #16]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	619a      	str	r2, [r3, #24]
      break;
 8003e2a:	e064      	b.n	8003ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68b9      	ldr	r1, [r7, #8]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fa68 	bl	8004308 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699a      	ldr	r2, [r3, #24]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699a      	ldr	r2, [r3, #24]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6999      	ldr	r1, [r3, #24]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	021a      	lsls	r2, r3, #8
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	619a      	str	r2, [r3, #24]
      break;
 8003e6c:	e043      	b.n	8003ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68b9      	ldr	r1, [r7, #8]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 fabd 	bl	80043f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	69da      	ldr	r2, [r3, #28]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f042 0208 	orr.w	r2, r2, #8
 8003e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	69da      	ldr	r2, [r3, #28]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0204 	bic.w	r2, r2, #4
 8003e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	69d9      	ldr	r1, [r3, #28]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	691a      	ldr	r2, [r3, #16]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	61da      	str	r2, [r3, #28]
      break;
 8003eac:	e023      	b.n	8003ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68b9      	ldr	r1, [r7, #8]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 fb11 	bl	80044dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	69da      	ldr	r2, [r3, #28]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69da      	ldr	r2, [r3, #28]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69d9      	ldr	r1, [r3, #28]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	021a      	lsls	r2, r3, #8
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	61da      	str	r2, [r3, #28]
      break;
 8003eee:	e002      	b.n	8003ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ef4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d101      	bne.n	8003f24 <HAL_TIM_ConfigClockSource+0x1c>
 8003f20:	2302      	movs	r3, #2
 8003f22:	e0b4      	b.n	800408e <HAL_TIM_ConfigClockSource+0x186>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f5c:	d03e      	beq.n	8003fdc <HAL_TIM_ConfigClockSource+0xd4>
 8003f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f62:	f200 8087 	bhi.w	8004074 <HAL_TIM_ConfigClockSource+0x16c>
 8003f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f6a:	f000 8086 	beq.w	800407a <HAL_TIM_ConfigClockSource+0x172>
 8003f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f72:	d87f      	bhi.n	8004074 <HAL_TIM_ConfigClockSource+0x16c>
 8003f74:	2b70      	cmp	r3, #112	; 0x70
 8003f76:	d01a      	beq.n	8003fae <HAL_TIM_ConfigClockSource+0xa6>
 8003f78:	2b70      	cmp	r3, #112	; 0x70
 8003f7a:	d87b      	bhi.n	8004074 <HAL_TIM_ConfigClockSource+0x16c>
 8003f7c:	2b60      	cmp	r3, #96	; 0x60
 8003f7e:	d050      	beq.n	8004022 <HAL_TIM_ConfigClockSource+0x11a>
 8003f80:	2b60      	cmp	r3, #96	; 0x60
 8003f82:	d877      	bhi.n	8004074 <HAL_TIM_ConfigClockSource+0x16c>
 8003f84:	2b50      	cmp	r3, #80	; 0x50
 8003f86:	d03c      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0xfa>
 8003f88:	2b50      	cmp	r3, #80	; 0x50
 8003f8a:	d873      	bhi.n	8004074 <HAL_TIM_ConfigClockSource+0x16c>
 8003f8c:	2b40      	cmp	r3, #64	; 0x40
 8003f8e:	d058      	beq.n	8004042 <HAL_TIM_ConfigClockSource+0x13a>
 8003f90:	2b40      	cmp	r3, #64	; 0x40
 8003f92:	d86f      	bhi.n	8004074 <HAL_TIM_ConfigClockSource+0x16c>
 8003f94:	2b30      	cmp	r3, #48	; 0x30
 8003f96:	d064      	beq.n	8004062 <HAL_TIM_ConfigClockSource+0x15a>
 8003f98:	2b30      	cmp	r3, #48	; 0x30
 8003f9a:	d86b      	bhi.n	8004074 <HAL_TIM_ConfigClockSource+0x16c>
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d060      	beq.n	8004062 <HAL_TIM_ConfigClockSource+0x15a>
 8003fa0:	2b20      	cmp	r3, #32
 8003fa2:	d867      	bhi.n	8004074 <HAL_TIM_ConfigClockSource+0x16c>
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d05c      	beq.n	8004062 <HAL_TIM_ConfigClockSource+0x15a>
 8003fa8:	2b10      	cmp	r3, #16
 8003faa:	d05a      	beq.n	8004062 <HAL_TIM_ConfigClockSource+0x15a>
 8003fac:	e062      	b.n	8004074 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6818      	ldr	r0, [r3, #0]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	6899      	ldr	r1, [r3, #8]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	f000 fb5d 	bl	800467c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	609a      	str	r2, [r3, #8]
      break;
 8003fda:	e04f      	b.n	800407c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6818      	ldr	r0, [r3, #0]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	6899      	ldr	r1, [r3, #8]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f000 fb46 	bl	800467c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689a      	ldr	r2, [r3, #8]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ffe:	609a      	str	r2, [r3, #8]
      break;
 8004000:	e03c      	b.n	800407c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6818      	ldr	r0, [r3, #0]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	6859      	ldr	r1, [r3, #4]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	461a      	mov	r2, r3
 8004010:	f000 faba 	bl	8004588 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2150      	movs	r1, #80	; 0x50
 800401a:	4618      	mov	r0, r3
 800401c:	f000 fb13 	bl	8004646 <TIM_ITRx_SetConfig>
      break;
 8004020:	e02c      	b.n	800407c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6818      	ldr	r0, [r3, #0]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	6859      	ldr	r1, [r3, #4]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	461a      	mov	r2, r3
 8004030:	f000 fad9 	bl	80045e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2160      	movs	r1, #96	; 0x60
 800403a:	4618      	mov	r0, r3
 800403c:	f000 fb03 	bl	8004646 <TIM_ITRx_SetConfig>
      break;
 8004040:	e01c      	b.n	800407c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6818      	ldr	r0, [r3, #0]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	6859      	ldr	r1, [r3, #4]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	461a      	mov	r2, r3
 8004050:	f000 fa9a 	bl	8004588 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2140      	movs	r1, #64	; 0x40
 800405a:	4618      	mov	r0, r3
 800405c:	f000 faf3 	bl	8004646 <TIM_ITRx_SetConfig>
      break;
 8004060:	e00c      	b.n	800407c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4619      	mov	r1, r3
 800406c:	4610      	mov	r0, r2
 800406e:	f000 faea 	bl	8004646 <TIM_ITRx_SetConfig>
      break;
 8004072:	e003      	b.n	800407c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	73fb      	strb	r3, [r7, #15]
      break;
 8004078:	e000      	b.n	800407c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800407a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800408c:	7bfb      	ldrb	r3, [r7, #15]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b083      	sub	sp, #12
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
	...

080040e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a40      	ldr	r2, [pc, #256]	; (80041fc <TIM_Base_SetConfig+0x114>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d013      	beq.n	8004128 <TIM_Base_SetConfig+0x40>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004106:	d00f      	beq.n	8004128 <TIM_Base_SetConfig+0x40>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a3d      	ldr	r2, [pc, #244]	; (8004200 <TIM_Base_SetConfig+0x118>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d00b      	beq.n	8004128 <TIM_Base_SetConfig+0x40>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a3c      	ldr	r2, [pc, #240]	; (8004204 <TIM_Base_SetConfig+0x11c>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d007      	beq.n	8004128 <TIM_Base_SetConfig+0x40>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a3b      	ldr	r2, [pc, #236]	; (8004208 <TIM_Base_SetConfig+0x120>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d003      	beq.n	8004128 <TIM_Base_SetConfig+0x40>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a3a      	ldr	r2, [pc, #232]	; (800420c <TIM_Base_SetConfig+0x124>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d108      	bne.n	800413a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	4313      	orrs	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a2f      	ldr	r2, [pc, #188]	; (80041fc <TIM_Base_SetConfig+0x114>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d02b      	beq.n	800419a <TIM_Base_SetConfig+0xb2>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004148:	d027      	beq.n	800419a <TIM_Base_SetConfig+0xb2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a2c      	ldr	r2, [pc, #176]	; (8004200 <TIM_Base_SetConfig+0x118>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d023      	beq.n	800419a <TIM_Base_SetConfig+0xb2>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a2b      	ldr	r2, [pc, #172]	; (8004204 <TIM_Base_SetConfig+0x11c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d01f      	beq.n	800419a <TIM_Base_SetConfig+0xb2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a2a      	ldr	r2, [pc, #168]	; (8004208 <TIM_Base_SetConfig+0x120>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d01b      	beq.n	800419a <TIM_Base_SetConfig+0xb2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a29      	ldr	r2, [pc, #164]	; (800420c <TIM_Base_SetConfig+0x124>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d017      	beq.n	800419a <TIM_Base_SetConfig+0xb2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a28      	ldr	r2, [pc, #160]	; (8004210 <TIM_Base_SetConfig+0x128>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d013      	beq.n	800419a <TIM_Base_SetConfig+0xb2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a27      	ldr	r2, [pc, #156]	; (8004214 <TIM_Base_SetConfig+0x12c>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d00f      	beq.n	800419a <TIM_Base_SetConfig+0xb2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a26      	ldr	r2, [pc, #152]	; (8004218 <TIM_Base_SetConfig+0x130>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d00b      	beq.n	800419a <TIM_Base_SetConfig+0xb2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a25      	ldr	r2, [pc, #148]	; (800421c <TIM_Base_SetConfig+0x134>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d007      	beq.n	800419a <TIM_Base_SetConfig+0xb2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a24      	ldr	r2, [pc, #144]	; (8004220 <TIM_Base_SetConfig+0x138>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d003      	beq.n	800419a <TIM_Base_SetConfig+0xb2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a23      	ldr	r2, [pc, #140]	; (8004224 <TIM_Base_SetConfig+0x13c>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d108      	bne.n	80041ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a0a      	ldr	r2, [pc, #40]	; (80041fc <TIM_Base_SetConfig+0x114>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d003      	beq.n	80041e0 <TIM_Base_SetConfig+0xf8>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a0c      	ldr	r2, [pc, #48]	; (800420c <TIM_Base_SetConfig+0x124>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d103      	bne.n	80041e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	691a      	ldr	r2, [r3, #16]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	615a      	str	r2, [r3, #20]
}
 80041ee:	bf00      	nop
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	40010000 	.word	0x40010000
 8004200:	40000400 	.word	0x40000400
 8004204:	40000800 	.word	0x40000800
 8004208:	40000c00 	.word	0x40000c00
 800420c:	40010400 	.word	0x40010400
 8004210:	40014000 	.word	0x40014000
 8004214:	40014400 	.word	0x40014400
 8004218:	40014800 	.word	0x40014800
 800421c:	40001800 	.word	0x40001800
 8004220:	40001c00 	.word	0x40001c00
 8004224:	40002000 	.word	0x40002000

08004228 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	f023 0201 	bic.w	r2, r3, #1
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 0303 	bic.w	r3, r3, #3
 800425e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f023 0302 	bic.w	r3, r3, #2
 8004270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4313      	orrs	r3, r2
 800427a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a20      	ldr	r2, [pc, #128]	; (8004300 <TIM_OC1_SetConfig+0xd8>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d003      	beq.n	800428c <TIM_OC1_SetConfig+0x64>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a1f      	ldr	r2, [pc, #124]	; (8004304 <TIM_OC1_SetConfig+0xdc>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d10c      	bne.n	80042a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f023 0308 	bic.w	r3, r3, #8
 8004292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f023 0304 	bic.w	r3, r3, #4
 80042a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a15      	ldr	r2, [pc, #84]	; (8004300 <TIM_OC1_SetConfig+0xd8>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d003      	beq.n	80042b6 <TIM_OC1_SetConfig+0x8e>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a14      	ldr	r2, [pc, #80]	; (8004304 <TIM_OC1_SetConfig+0xdc>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d111      	bne.n	80042da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	621a      	str	r2, [r3, #32]
}
 80042f4:	bf00      	nop
 80042f6:	371c      	adds	r7, #28
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	40010000 	.word	0x40010000
 8004304:	40010400 	.word	0x40010400

08004308 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004308:	b480      	push	{r7}
 800430a:	b087      	sub	sp, #28
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	f023 0210 	bic.w	r2, r3, #16
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800433e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	021b      	lsls	r3, r3, #8
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4313      	orrs	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f023 0320 	bic.w	r3, r3, #32
 8004352:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	011b      	lsls	r3, r3, #4
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4313      	orrs	r3, r2
 800435e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a22      	ldr	r2, [pc, #136]	; (80043ec <TIM_OC2_SetConfig+0xe4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d003      	beq.n	8004370 <TIM_OC2_SetConfig+0x68>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a21      	ldr	r2, [pc, #132]	; (80043f0 <TIM_OC2_SetConfig+0xe8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d10d      	bne.n	800438c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	4313      	orrs	r3, r2
 8004382:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800438a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a17      	ldr	r2, [pc, #92]	; (80043ec <TIM_OC2_SetConfig+0xe4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d003      	beq.n	800439c <TIM_OC2_SetConfig+0x94>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a16      	ldr	r2, [pc, #88]	; (80043f0 <TIM_OC2_SetConfig+0xe8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d113      	bne.n	80043c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	621a      	str	r2, [r3, #32]
}
 80043de:	bf00      	nop
 80043e0:	371c      	adds	r7, #28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	40010000 	.word	0x40010000
 80043f0:	40010400 	.word	0x40010400

080043f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b087      	sub	sp, #28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 0303 	bic.w	r3, r3, #3
 800442a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	4313      	orrs	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800443c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	021b      	lsls	r3, r3, #8
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a21      	ldr	r2, [pc, #132]	; (80044d4 <TIM_OC3_SetConfig+0xe0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d003      	beq.n	800445a <TIM_OC3_SetConfig+0x66>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a20      	ldr	r2, [pc, #128]	; (80044d8 <TIM_OC3_SetConfig+0xe4>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d10d      	bne.n	8004476 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004460:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	4313      	orrs	r3, r2
 800446c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004474:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a16      	ldr	r2, [pc, #88]	; (80044d4 <TIM_OC3_SetConfig+0xe0>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d003      	beq.n	8004486 <TIM_OC3_SetConfig+0x92>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a15      	ldr	r2, [pc, #84]	; (80044d8 <TIM_OC3_SetConfig+0xe4>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d113      	bne.n	80044ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800448c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	4313      	orrs	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	621a      	str	r2, [r3, #32]
}
 80044c8:	bf00      	nop
 80044ca:	371c      	adds	r7, #28
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	40010000 	.word	0x40010000
 80044d8:	40010400 	.word	0x40010400

080044dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800450a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	021b      	lsls	r3, r3, #8
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	4313      	orrs	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004526:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	031b      	lsls	r3, r3, #12
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	4313      	orrs	r3, r2
 8004532:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a12      	ldr	r2, [pc, #72]	; (8004580 <TIM_OC4_SetConfig+0xa4>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d003      	beq.n	8004544 <TIM_OC4_SetConfig+0x68>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a11      	ldr	r2, [pc, #68]	; (8004584 <TIM_OC4_SetConfig+0xa8>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d109      	bne.n	8004558 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800454a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	019b      	lsls	r3, r3, #6
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	4313      	orrs	r3, r2
 8004556:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	621a      	str	r2, [r3, #32]
}
 8004572:	bf00      	nop
 8004574:	371c      	adds	r7, #28
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	40010000 	.word	0x40010000
 8004584:	40010400 	.word	0x40010400

08004588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	f023 0201 	bic.w	r2, r3, #1
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f023 030a 	bic.w	r3, r3, #10
 80045c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	621a      	str	r2, [r3, #32]
}
 80045da:	bf00      	nop
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b087      	sub	sp, #28
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	60f8      	str	r0, [r7, #12]
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	f023 0210 	bic.w	r2, r3, #16
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004610:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	031b      	lsls	r3, r3, #12
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	4313      	orrs	r3, r2
 800461a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004622:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	621a      	str	r2, [r3, #32]
}
 800463a:	bf00      	nop
 800463c:	371c      	adds	r7, #28
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004646:	b480      	push	{r7}
 8004648:	b085      	sub	sp, #20
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
 800464e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800465c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	f043 0307 	orr.w	r3, r3, #7
 8004668:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	609a      	str	r2, [r3, #8]
}
 8004670:	bf00      	nop
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800467c:	b480      	push	{r7}
 800467e:	b087      	sub	sp, #28
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
 8004688:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004696:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	021a      	lsls	r2, r3, #8
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	431a      	orrs	r2, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	609a      	str	r2, [r3, #8]
}
 80046b0:	bf00      	nop
 80046b2:	371c      	adds	r7, #28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046bc:	b480      	push	{r7}
 80046be:	b087      	sub	sp, #28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f003 031f 	and.w	r3, r3, #31
 80046ce:	2201      	movs	r2, #1
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6a1a      	ldr	r2, [r3, #32]
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	43db      	mvns	r3, r3
 80046de:	401a      	ands	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6a1a      	ldr	r2, [r3, #32]
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f003 031f 	and.w	r3, r3, #31
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	fa01 f303 	lsl.w	r3, r1, r3
 80046f4:	431a      	orrs	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	621a      	str	r2, [r3, #32]
}
 80046fa:	bf00      	nop
 80046fc:	371c      	adds	r7, #28
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
	...

08004708 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004718:	2b01      	cmp	r3, #1
 800471a:	d101      	bne.n	8004720 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800471c:	2302      	movs	r3, #2
 800471e:	e05a      	b.n	80047d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004746:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	4313      	orrs	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a21      	ldr	r2, [pc, #132]	; (80047e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d022      	beq.n	80047aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800476c:	d01d      	beq.n	80047aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a1d      	ldr	r2, [pc, #116]	; (80047e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d018      	beq.n	80047aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a1b      	ldr	r2, [pc, #108]	; (80047ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d013      	beq.n	80047aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a1a      	ldr	r2, [pc, #104]	; (80047f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d00e      	beq.n	80047aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a18      	ldr	r2, [pc, #96]	; (80047f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d009      	beq.n	80047aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a17      	ldr	r2, [pc, #92]	; (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d004      	beq.n	80047aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a15      	ldr	r2, [pc, #84]	; (80047fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d10c      	bne.n	80047c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	40010000 	.word	0x40010000
 80047e8:	40000400 	.word	0x40000400
 80047ec:	40000800 	.word	0x40000800
 80047f0:	40000c00 	.word	0x40000c00
 80047f4:	40010400 	.word	0x40010400
 80047f8:	40014000 	.word	0x40014000
 80047fc:	40001800 	.word	0x40001800

08004800 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e03f      	b.n	80048ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d106      	bne.n	8004854 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7fd fe00 	bl	8002454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2224      	movs	r2, #36	; 0x24
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800486a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fddf 	bl	8005430 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	691a      	ldr	r2, [r3, #16]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004880:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	695a      	ldr	r2, [r3, #20]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004890:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68da      	ldr	r2, [r3, #12]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2220      	movs	r2, #32
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b08a      	sub	sp, #40	; 0x28
 80048c6:	af02      	add	r7, sp, #8
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	603b      	str	r3, [r7, #0]
 80048ce:	4613      	mov	r3, r2
 80048d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b20      	cmp	r3, #32
 80048e0:	d17c      	bne.n	80049dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <HAL_UART_Transmit+0x2c>
 80048e8:	88fb      	ldrh	r3, [r7, #6]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e075      	b.n	80049de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d101      	bne.n	8004900 <HAL_UART_Transmit+0x3e>
 80048fc:	2302      	movs	r3, #2
 80048fe:	e06e      	b.n	80049de <HAL_UART_Transmit+0x11c>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2221      	movs	r2, #33	; 0x21
 8004912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004916:	f7fd fe7d 	bl	8002614 <HAL_GetTick>
 800491a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	88fa      	ldrh	r2, [r7, #6]
 8004920:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	88fa      	ldrh	r2, [r7, #6]
 8004926:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004930:	d108      	bne.n	8004944 <HAL_UART_Transmit+0x82>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d104      	bne.n	8004944 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800493a:	2300      	movs	r3, #0
 800493c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	61bb      	str	r3, [r7, #24]
 8004942:	e003      	b.n	800494c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004948:	2300      	movs	r3, #0
 800494a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004954:	e02a      	b.n	80049ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2200      	movs	r2, #0
 800495e:	2180      	movs	r1, #128	; 0x80
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 fb1f 	bl	8004fa4 <UART_WaitOnFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e036      	b.n	80049de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10b      	bne.n	800498e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004984:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	3302      	adds	r3, #2
 800498a:	61bb      	str	r3, [r7, #24]
 800498c:	e007      	b.n	800499e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	781a      	ldrb	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	3301      	adds	r3, #1
 800499c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	3b01      	subs	r3, #1
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1cf      	bne.n	8004956 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2200      	movs	r2, #0
 80049be:	2140      	movs	r1, #64	; 0x40
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 faef 	bl	8004fa4 <UART_WaitOnFlagUntilTimeout>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e006      	b.n	80049de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049d8:	2300      	movs	r3, #0
 80049da:	e000      	b.n	80049de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80049dc:	2302      	movs	r3, #2
  }
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3720      	adds	r7, #32
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b084      	sub	sp, #16
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	60f8      	str	r0, [r7, #12]
 80049ee:	60b9      	str	r1, [r7, #8]
 80049f0:	4613      	mov	r3, r2
 80049f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b20      	cmp	r3, #32
 80049fe:	d11d      	bne.n	8004a3c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d002      	beq.n	8004a0c <HAL_UART_Receive_IT+0x26>
 8004a06:	88fb      	ldrh	r3, [r7, #6]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d101      	bne.n	8004a10 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e016      	b.n	8004a3e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <HAL_UART_Receive_IT+0x38>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e00f      	b.n	8004a3e <HAL_UART_Receive_IT+0x58>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a2c:	88fb      	ldrh	r3, [r7, #6]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	68b9      	ldr	r1, [r7, #8]
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 fb24 	bl	8005080 <UART_Start_Receive_IT>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	e000      	b.n	8004a3e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004a3c:	2302      	movs	r3, #2
  }
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b0ba      	sub	sp, #232	; 0xe8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004a86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10f      	bne.n	8004aae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a92:	f003 0320 	and.w	r3, r3, #32
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d009      	beq.n	8004aae <HAL_UART_IRQHandler+0x66>
 8004a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a9e:	f003 0320 	and.w	r3, r3, #32
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 fc07 	bl	80052ba <UART_Receive_IT>
      return;
 8004aac:	e256      	b.n	8004f5c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004aae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 80de 	beq.w	8004c74 <HAL_UART_IRQHandler+0x22c>
 8004ab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d106      	bne.n	8004ad2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ac8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 80d1 	beq.w	8004c74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00b      	beq.n	8004af6 <HAL_UART_IRQHandler+0xae>
 8004ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d005      	beq.n	8004af6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	f043 0201 	orr.w	r2, r3, #1
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00b      	beq.n	8004b1a <HAL_UART_IRQHandler+0xd2>
 8004b02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d005      	beq.n	8004b1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	f043 0202 	orr.w	r2, r3, #2
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00b      	beq.n	8004b3e <HAL_UART_IRQHandler+0xf6>
 8004b26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d005      	beq.n	8004b3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	f043 0204 	orr.w	r2, r3, #4
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d011      	beq.n	8004b6e <HAL_UART_IRQHandler+0x126>
 8004b4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b4e:	f003 0320 	and.w	r3, r3, #32
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d105      	bne.n	8004b62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d005      	beq.n	8004b6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	f043 0208 	orr.w	r2, r3, #8
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 81ed 	beq.w	8004f52 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b7c:	f003 0320 	and.w	r3, r3, #32
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d008      	beq.n	8004b96 <HAL_UART_IRQHandler+0x14e>
 8004b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b88:	f003 0320 	and.w	r3, r3, #32
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 fb92 	bl	80052ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba0:	2b40      	cmp	r3, #64	; 0x40
 8004ba2:	bf0c      	ite	eq
 8004ba4:	2301      	moveq	r3, #1
 8004ba6:	2300      	movne	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d103      	bne.n	8004bc2 <HAL_UART_IRQHandler+0x17a>
 8004bba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d04f      	beq.n	8004c62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fa9a 	bl	80050fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd2:	2b40      	cmp	r3, #64	; 0x40
 8004bd4:	d141      	bne.n	8004c5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3314      	adds	r3, #20
 8004bdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004be4:	e853 3f00 	ldrex	r3, [r3]
 8004be8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004bec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3314      	adds	r3, #20
 8004bfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c12:	e841 2300 	strex	r3, r2, [r1]
 8004c16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1d9      	bne.n	8004bd6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d013      	beq.n	8004c52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2e:	4a7d      	ldr	r2, [pc, #500]	; (8004e24 <HAL_UART_IRQHandler+0x3dc>)
 8004c30:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fd fe79 	bl	800292e <HAL_DMA_Abort_IT>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d016      	beq.n	8004c70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c50:	e00e      	b.n	8004c70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f990 	bl	8004f78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c58:	e00a      	b.n	8004c70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f98c 	bl	8004f78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c60:	e006      	b.n	8004c70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f988 	bl	8004f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004c6e:	e170      	b.n	8004f52 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c70:	bf00      	nop
    return;
 8004c72:	e16e      	b.n	8004f52 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	f040 814a 	bne.w	8004f12 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c82:	f003 0310 	and.w	r3, r3, #16
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 8143 	beq.w	8004f12 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c90:	f003 0310 	and.w	r3, r3, #16
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 813c 	beq.w	8004f12 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60bb      	str	r3, [r7, #8]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	60bb      	str	r3, [r7, #8]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cba:	2b40      	cmp	r3, #64	; 0x40
 8004cbc:	f040 80b4 	bne.w	8004e28 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ccc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 8140 	beq.w	8004f56 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	f080 8139 	bcs.w	8004f56 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf6:	f000 8088 	beq.w	8004e0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	330c      	adds	r3, #12
 8004d00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d08:	e853 3f00 	ldrex	r3, [r3]
 8004d0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	330c      	adds	r3, #12
 8004d22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004d26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d36:	e841 2300 	strex	r3, r2, [r1]
 8004d3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1d9      	bne.n	8004cfa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	3314      	adds	r3, #20
 8004d4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d50:	e853 3f00 	ldrex	r3, [r3]
 8004d54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d58:	f023 0301 	bic.w	r3, r3, #1
 8004d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3314      	adds	r3, #20
 8004d66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d76:	e841 2300 	strex	r3, r2, [r1]
 8004d7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1e1      	bne.n	8004d46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3314      	adds	r3, #20
 8004d88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d8c:	e853 3f00 	ldrex	r3, [r3]
 8004d90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3314      	adds	r3, #20
 8004da2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004da6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004da8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004daa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004dac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004dae:	e841 2300 	strex	r3, r2, [r1]
 8004db2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004db4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1e3      	bne.n	8004d82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	330c      	adds	r3, #12
 8004dce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dd2:	e853 3f00 	ldrex	r3, [r3]
 8004dd6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dda:	f023 0310 	bic.w	r3, r3, #16
 8004dde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	330c      	adds	r3, #12
 8004de8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004dec:	65ba      	str	r2, [r7, #88]	; 0x58
 8004dee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004df2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004df4:	e841 2300 	strex	r3, r2, [r1]
 8004df8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1e3      	bne.n	8004dc8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7fd fd22 	bl	800284e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	4619      	mov	r1, r3
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f8b6 	bl	8004f8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e20:	e099      	b.n	8004f56 <HAL_UART_IRQHandler+0x50e>
 8004e22:	bf00      	nop
 8004e24:	080051c3 	.word	0x080051c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 808b 	beq.w	8004f5a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004e44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 8086 	beq.w	8004f5a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	330c      	adds	r3, #12
 8004e54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	330c      	adds	r3, #12
 8004e6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004e72:	647a      	str	r2, [r7, #68]	; 0x44
 8004e74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e7a:	e841 2300 	strex	r3, r2, [r1]
 8004e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1e3      	bne.n	8004e4e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3314      	adds	r3, #20
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	e853 3f00 	ldrex	r3, [r3]
 8004e94:	623b      	str	r3, [r7, #32]
   return(result);
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	f023 0301 	bic.w	r3, r3, #1
 8004e9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3314      	adds	r3, #20
 8004ea6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004eaa:	633a      	str	r2, [r7, #48]	; 0x30
 8004eac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e3      	bne.n	8004e86 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	330c      	adds	r3, #12
 8004ed2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	e853 3f00 	ldrex	r3, [r3]
 8004eda:	60fb      	str	r3, [r7, #12]
   return(result);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0310 	bic.w	r3, r3, #16
 8004ee2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	330c      	adds	r3, #12
 8004eec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ef0:	61fa      	str	r2, [r7, #28]
 8004ef2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef4:	69b9      	ldr	r1, [r7, #24]
 8004ef6:	69fa      	ldr	r2, [r7, #28]
 8004ef8:	e841 2300 	strex	r3, r2, [r1]
 8004efc:	617b      	str	r3, [r7, #20]
   return(result);
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1e3      	bne.n	8004ecc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f08:	4619      	mov	r1, r3
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f83e 	bl	8004f8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f10:	e023      	b.n	8004f5a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d009      	beq.n	8004f32 <HAL_UART_IRQHandler+0x4ea>
 8004f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f95d 	bl	80051ea <UART_Transmit_IT>
    return;
 8004f30:	e014      	b.n	8004f5c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00e      	beq.n	8004f5c <HAL_UART_IRQHandler+0x514>
 8004f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d008      	beq.n	8004f5c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f99d 	bl	800528a <UART_EndTransmit_IT>
    return;
 8004f50:	e004      	b.n	8004f5c <HAL_UART_IRQHandler+0x514>
    return;
 8004f52:	bf00      	nop
 8004f54:	e002      	b.n	8004f5c <HAL_UART_IRQHandler+0x514>
      return;
 8004f56:	bf00      	nop
 8004f58:	e000      	b.n	8004f5c <HAL_UART_IRQHandler+0x514>
      return;
 8004f5a:	bf00      	nop
  }
}
 8004f5c:	37e8      	adds	r7, #232	; 0xe8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop

08004f64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	460b      	mov	r3, r1
 8004f96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b090      	sub	sp, #64	; 0x40
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	603b      	str	r3, [r7, #0]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb4:	e050      	b.n	8005058 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbc:	d04c      	beq.n	8005058 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d007      	beq.n	8004fd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fc4:	f7fd fb26 	bl	8002614 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d241      	bcs.n	8005058 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	330c      	adds	r3, #12
 8004fda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fde:	e853 3f00 	ldrex	r3, [r3]
 8004fe2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	330c      	adds	r3, #12
 8004ff2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ff4:	637a      	str	r2, [r7, #52]	; 0x34
 8004ff6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ffc:	e841 2300 	strex	r3, r2, [r1]
 8005000:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1e5      	bne.n	8004fd4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3314      	adds	r3, #20
 800500e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	e853 3f00 	ldrex	r3, [r3]
 8005016:	613b      	str	r3, [r7, #16]
   return(result);
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f023 0301 	bic.w	r3, r3, #1
 800501e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	3314      	adds	r3, #20
 8005026:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005028:	623a      	str	r2, [r7, #32]
 800502a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502c:	69f9      	ldr	r1, [r7, #28]
 800502e:	6a3a      	ldr	r2, [r7, #32]
 8005030:	e841 2300 	strex	r3, r2, [r1]
 8005034:	61bb      	str	r3, [r7, #24]
   return(result);
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1e5      	bne.n	8005008 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2220      	movs	r2, #32
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e00f      	b.n	8005078 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	4013      	ands	r3, r2
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	429a      	cmp	r2, r3
 8005066:	bf0c      	ite	eq
 8005068:	2301      	moveq	r3, #1
 800506a:	2300      	movne	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	461a      	mov	r2, r3
 8005070:	79fb      	ldrb	r3, [r7, #7]
 8005072:	429a      	cmp	r2, r3
 8005074:	d09f      	beq.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3740      	adds	r7, #64	; 0x40
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	4613      	mov	r3, r2
 800508c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	88fa      	ldrh	r2, [r7, #6]
 8005098:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	88fa      	ldrh	r2, [r7, #6]
 800509e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2222      	movs	r2, #34	; 0x22
 80050aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d007      	beq.n	80050ce <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68da      	ldr	r2, [r3, #12]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050cc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	695a      	ldr	r2, [r3, #20]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f042 0201 	orr.w	r2, r2, #1
 80050dc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68da      	ldr	r2, [r3, #12]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f042 0220 	orr.w	r2, r2, #32
 80050ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b095      	sub	sp, #84	; 0x54
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	330c      	adds	r3, #12
 800510a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800510e:	e853 3f00 	ldrex	r3, [r3]
 8005112:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005116:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800511a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	330c      	adds	r3, #12
 8005122:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005124:	643a      	str	r2, [r7, #64]	; 0x40
 8005126:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005128:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800512a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800512c:	e841 2300 	strex	r3, r2, [r1]
 8005130:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1e5      	bne.n	8005104 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3314      	adds	r3, #20
 800513e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	e853 3f00 	ldrex	r3, [r3]
 8005146:	61fb      	str	r3, [r7, #28]
   return(result);
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	f023 0301 	bic.w	r3, r3, #1
 800514e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3314      	adds	r3, #20
 8005156:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005158:	62fa      	str	r2, [r7, #44]	; 0x2c
 800515a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800515e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005160:	e841 2300 	strex	r3, r2, [r1]
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1e5      	bne.n	8005138 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005170:	2b01      	cmp	r3, #1
 8005172:	d119      	bne.n	80051a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	330c      	adds	r3, #12
 800517a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	e853 3f00 	ldrex	r3, [r3]
 8005182:	60bb      	str	r3, [r7, #8]
   return(result);
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f023 0310 	bic.w	r3, r3, #16
 800518a:	647b      	str	r3, [r7, #68]	; 0x44
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	330c      	adds	r3, #12
 8005192:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005194:	61ba      	str	r2, [r7, #24]
 8005196:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005198:	6979      	ldr	r1, [r7, #20]
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	e841 2300 	strex	r3, r2, [r1]
 80051a0:	613b      	str	r3, [r7, #16]
   return(result);
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1e5      	bne.n	8005174 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2220      	movs	r2, #32
 80051ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80051b6:	bf00      	nop
 80051b8:	3754      	adds	r7, #84	; 0x54
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b084      	sub	sp, #16
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f7ff fecb 	bl	8004f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051e2:	bf00      	nop
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b085      	sub	sp, #20
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b21      	cmp	r3, #33	; 0x21
 80051fc:	d13e      	bne.n	800527c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005206:	d114      	bne.n	8005232 <UART_Transmit_IT+0x48>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d110      	bne.n	8005232 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	461a      	mov	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005224:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	1c9a      	adds	r2, r3, #2
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	621a      	str	r2, [r3, #32]
 8005230:	e008      	b.n	8005244 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	1c59      	adds	r1, r3, #1
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	6211      	str	r1, [r2, #32]
 800523c:	781a      	ldrb	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005248:	b29b      	uxth	r3, r3
 800524a:	3b01      	subs	r3, #1
 800524c:	b29b      	uxth	r3, r3
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	4619      	mov	r1, r3
 8005252:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10f      	bne.n	8005278 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005266:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005276:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	e000      	b.n	800527e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800527c:	2302      	movs	r3, #2
  }
}
 800527e:	4618      	mov	r0, r3
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b082      	sub	sp, #8
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68da      	ldr	r2, [r3, #12]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2220      	movs	r2, #32
 80052a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7ff fe5a 	bl	8004f64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b08c      	sub	sp, #48	; 0x30
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b22      	cmp	r3, #34	; 0x22
 80052cc:	f040 80ab 	bne.w	8005426 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052d8:	d117      	bne.n	800530a <UART_Receive_IT+0x50>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d113      	bne.n	800530a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052e2:	2300      	movs	r3, #0
 80052e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005302:	1c9a      	adds	r2, r3, #2
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	629a      	str	r2, [r3, #40]	; 0x28
 8005308:	e026      	b.n	8005358 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005310:	2300      	movs	r3, #0
 8005312:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800531c:	d007      	beq.n	800532e <UART_Receive_IT+0x74>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10a      	bne.n	800533c <UART_Receive_IT+0x82>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d106      	bne.n	800533c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	b2da      	uxtb	r2, r3
 8005336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005338:	701a      	strb	r2, [r3, #0]
 800533a:	e008      	b.n	800534e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	b2db      	uxtb	r3, r3
 8005344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005348:	b2da      	uxtb	r2, r3
 800534a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005352:	1c5a      	adds	r2, r3, #1
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800535c:	b29b      	uxth	r3, r3
 800535e:	3b01      	subs	r3, #1
 8005360:	b29b      	uxth	r3, r3
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	4619      	mov	r1, r3
 8005366:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005368:	2b00      	cmp	r3, #0
 800536a:	d15a      	bne.n	8005422 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68da      	ldr	r2, [r3, #12]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 0220 	bic.w	r2, r2, #32
 800537a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68da      	ldr	r2, [r3, #12]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800538a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	695a      	ldr	r2, [r3, #20]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0201 	bic.w	r2, r2, #1
 800539a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2220      	movs	r2, #32
 80053a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d135      	bne.n	8005418 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	330c      	adds	r3, #12
 80053b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	e853 3f00 	ldrex	r3, [r3]
 80053c0:	613b      	str	r3, [r7, #16]
   return(result);
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f023 0310 	bic.w	r3, r3, #16
 80053c8:	627b      	str	r3, [r7, #36]	; 0x24
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	330c      	adds	r3, #12
 80053d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d2:	623a      	str	r2, [r7, #32]
 80053d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d6:	69f9      	ldr	r1, [r7, #28]
 80053d8:	6a3a      	ldr	r2, [r7, #32]
 80053da:	e841 2300 	strex	r3, r2, [r1]
 80053de:	61bb      	str	r3, [r7, #24]
   return(result);
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1e5      	bne.n	80053b2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0310 	and.w	r3, r3, #16
 80053f0:	2b10      	cmp	r3, #16
 80053f2:	d10a      	bne.n	800540a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053f4:	2300      	movs	r3, #0
 80053f6:	60fb      	str	r3, [r7, #12]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800540e:	4619      	mov	r1, r3
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f7ff fdbb 	bl	8004f8c <HAL_UARTEx_RxEventCallback>
 8005416:	e002      	b.n	800541e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f7fc fd57 	bl	8001ecc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	e002      	b.n	8005428 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	e000      	b.n	8005428 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005426:	2302      	movs	r3, #2
  }
}
 8005428:	4618      	mov	r0, r3
 800542a:	3730      	adds	r7, #48	; 0x30
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005434:	b0c0      	sub	sp, #256	; 0x100
 8005436:	af00      	add	r7, sp, #0
 8005438:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800543c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800544c:	68d9      	ldr	r1, [r3, #12]
 800544e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	ea40 0301 	orr.w	r3, r0, r1
 8005458:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800545a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800545e:	689a      	ldr	r2, [r3, #8]
 8005460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	431a      	orrs	r2, r3
 8005468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	431a      	orrs	r2, r3
 8005470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	4313      	orrs	r3, r2
 8005478:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800547c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005488:	f021 010c 	bic.w	r1, r1, #12
 800548c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005496:	430b      	orrs	r3, r1
 8005498:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800549a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80054a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054aa:	6999      	ldr	r1, [r3, #24]
 80054ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	ea40 0301 	orr.w	r3, r0, r1
 80054b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	4b8f      	ldr	r3, [pc, #572]	; (80056fc <UART_SetConfig+0x2cc>)
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d005      	beq.n	80054d0 <UART_SetConfig+0xa0>
 80054c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	4b8d      	ldr	r3, [pc, #564]	; (8005700 <UART_SetConfig+0x2d0>)
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d104      	bne.n	80054da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054d0:	f7fe f830 	bl	8003534 <HAL_RCC_GetPCLK2Freq>
 80054d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80054d8:	e003      	b.n	80054e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054da:	f7fe f817 	bl	800350c <HAL_RCC_GetPCLK1Freq>
 80054de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e6:	69db      	ldr	r3, [r3, #28]
 80054e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054ec:	f040 810c 	bne.w	8005708 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054f4:	2200      	movs	r2, #0
 80054f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80054fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005502:	4622      	mov	r2, r4
 8005504:	462b      	mov	r3, r5
 8005506:	1891      	adds	r1, r2, r2
 8005508:	65b9      	str	r1, [r7, #88]	; 0x58
 800550a:	415b      	adcs	r3, r3
 800550c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800550e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005512:	4621      	mov	r1, r4
 8005514:	eb12 0801 	adds.w	r8, r2, r1
 8005518:	4629      	mov	r1, r5
 800551a:	eb43 0901 	adc.w	r9, r3, r1
 800551e:	f04f 0200 	mov.w	r2, #0
 8005522:	f04f 0300 	mov.w	r3, #0
 8005526:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800552a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800552e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005532:	4690      	mov	r8, r2
 8005534:	4699      	mov	r9, r3
 8005536:	4623      	mov	r3, r4
 8005538:	eb18 0303 	adds.w	r3, r8, r3
 800553c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005540:	462b      	mov	r3, r5
 8005542:	eb49 0303 	adc.w	r3, r9, r3
 8005546:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800554a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005556:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800555a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800555e:	460b      	mov	r3, r1
 8005560:	18db      	adds	r3, r3, r3
 8005562:	653b      	str	r3, [r7, #80]	; 0x50
 8005564:	4613      	mov	r3, r2
 8005566:	eb42 0303 	adc.w	r3, r2, r3
 800556a:	657b      	str	r3, [r7, #84]	; 0x54
 800556c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005570:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005574:	f7fb fa4e 	bl	8000a14 <__aeabi_uldivmod>
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	4b61      	ldr	r3, [pc, #388]	; (8005704 <UART_SetConfig+0x2d4>)
 800557e:	fba3 2302 	umull	r2, r3, r3, r2
 8005582:	095b      	lsrs	r3, r3, #5
 8005584:	011c      	lsls	r4, r3, #4
 8005586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800558a:	2200      	movs	r2, #0
 800558c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005590:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005594:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005598:	4642      	mov	r2, r8
 800559a:	464b      	mov	r3, r9
 800559c:	1891      	adds	r1, r2, r2
 800559e:	64b9      	str	r1, [r7, #72]	; 0x48
 80055a0:	415b      	adcs	r3, r3
 80055a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80055a8:	4641      	mov	r1, r8
 80055aa:	eb12 0a01 	adds.w	sl, r2, r1
 80055ae:	4649      	mov	r1, r9
 80055b0:	eb43 0b01 	adc.w	fp, r3, r1
 80055b4:	f04f 0200 	mov.w	r2, #0
 80055b8:	f04f 0300 	mov.w	r3, #0
 80055bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055c8:	4692      	mov	sl, r2
 80055ca:	469b      	mov	fp, r3
 80055cc:	4643      	mov	r3, r8
 80055ce:	eb1a 0303 	adds.w	r3, sl, r3
 80055d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055d6:	464b      	mov	r3, r9
 80055d8:	eb4b 0303 	adc.w	r3, fp, r3
 80055dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80055e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80055f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80055f4:	460b      	mov	r3, r1
 80055f6:	18db      	adds	r3, r3, r3
 80055f8:	643b      	str	r3, [r7, #64]	; 0x40
 80055fa:	4613      	mov	r3, r2
 80055fc:	eb42 0303 	adc.w	r3, r2, r3
 8005600:	647b      	str	r3, [r7, #68]	; 0x44
 8005602:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005606:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800560a:	f7fb fa03 	bl	8000a14 <__aeabi_uldivmod>
 800560e:	4602      	mov	r2, r0
 8005610:	460b      	mov	r3, r1
 8005612:	4611      	mov	r1, r2
 8005614:	4b3b      	ldr	r3, [pc, #236]	; (8005704 <UART_SetConfig+0x2d4>)
 8005616:	fba3 2301 	umull	r2, r3, r3, r1
 800561a:	095b      	lsrs	r3, r3, #5
 800561c:	2264      	movs	r2, #100	; 0x64
 800561e:	fb02 f303 	mul.w	r3, r2, r3
 8005622:	1acb      	subs	r3, r1, r3
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800562a:	4b36      	ldr	r3, [pc, #216]	; (8005704 <UART_SetConfig+0x2d4>)
 800562c:	fba3 2302 	umull	r2, r3, r3, r2
 8005630:	095b      	lsrs	r3, r3, #5
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005638:	441c      	add	r4, r3
 800563a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800563e:	2200      	movs	r2, #0
 8005640:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005644:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005648:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800564c:	4642      	mov	r2, r8
 800564e:	464b      	mov	r3, r9
 8005650:	1891      	adds	r1, r2, r2
 8005652:	63b9      	str	r1, [r7, #56]	; 0x38
 8005654:	415b      	adcs	r3, r3
 8005656:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005658:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800565c:	4641      	mov	r1, r8
 800565e:	1851      	adds	r1, r2, r1
 8005660:	6339      	str	r1, [r7, #48]	; 0x30
 8005662:	4649      	mov	r1, r9
 8005664:	414b      	adcs	r3, r1
 8005666:	637b      	str	r3, [r7, #52]	; 0x34
 8005668:	f04f 0200 	mov.w	r2, #0
 800566c:	f04f 0300 	mov.w	r3, #0
 8005670:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005674:	4659      	mov	r1, fp
 8005676:	00cb      	lsls	r3, r1, #3
 8005678:	4651      	mov	r1, sl
 800567a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800567e:	4651      	mov	r1, sl
 8005680:	00ca      	lsls	r2, r1, #3
 8005682:	4610      	mov	r0, r2
 8005684:	4619      	mov	r1, r3
 8005686:	4603      	mov	r3, r0
 8005688:	4642      	mov	r2, r8
 800568a:	189b      	adds	r3, r3, r2
 800568c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005690:	464b      	mov	r3, r9
 8005692:	460a      	mov	r2, r1
 8005694:	eb42 0303 	adc.w	r3, r2, r3
 8005698:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800569c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80056a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80056ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80056b0:	460b      	mov	r3, r1
 80056b2:	18db      	adds	r3, r3, r3
 80056b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80056b6:	4613      	mov	r3, r2
 80056b8:	eb42 0303 	adc.w	r3, r2, r3
 80056bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80056c6:	f7fb f9a5 	bl	8000a14 <__aeabi_uldivmod>
 80056ca:	4602      	mov	r2, r0
 80056cc:	460b      	mov	r3, r1
 80056ce:	4b0d      	ldr	r3, [pc, #52]	; (8005704 <UART_SetConfig+0x2d4>)
 80056d0:	fba3 1302 	umull	r1, r3, r3, r2
 80056d4:	095b      	lsrs	r3, r3, #5
 80056d6:	2164      	movs	r1, #100	; 0x64
 80056d8:	fb01 f303 	mul.w	r3, r1, r3
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	3332      	adds	r3, #50	; 0x32
 80056e2:	4a08      	ldr	r2, [pc, #32]	; (8005704 <UART_SetConfig+0x2d4>)
 80056e4:	fba2 2303 	umull	r2, r3, r2, r3
 80056e8:	095b      	lsrs	r3, r3, #5
 80056ea:	f003 0207 	and.w	r2, r3, #7
 80056ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4422      	add	r2, r4
 80056f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056f8:	e105      	b.n	8005906 <UART_SetConfig+0x4d6>
 80056fa:	bf00      	nop
 80056fc:	40011000 	.word	0x40011000
 8005700:	40011400 	.word	0x40011400
 8005704:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005708:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800570c:	2200      	movs	r2, #0
 800570e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005712:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005716:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800571a:	4642      	mov	r2, r8
 800571c:	464b      	mov	r3, r9
 800571e:	1891      	adds	r1, r2, r2
 8005720:	6239      	str	r1, [r7, #32]
 8005722:	415b      	adcs	r3, r3
 8005724:	627b      	str	r3, [r7, #36]	; 0x24
 8005726:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800572a:	4641      	mov	r1, r8
 800572c:	1854      	adds	r4, r2, r1
 800572e:	4649      	mov	r1, r9
 8005730:	eb43 0501 	adc.w	r5, r3, r1
 8005734:	f04f 0200 	mov.w	r2, #0
 8005738:	f04f 0300 	mov.w	r3, #0
 800573c:	00eb      	lsls	r3, r5, #3
 800573e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005742:	00e2      	lsls	r2, r4, #3
 8005744:	4614      	mov	r4, r2
 8005746:	461d      	mov	r5, r3
 8005748:	4643      	mov	r3, r8
 800574a:	18e3      	adds	r3, r4, r3
 800574c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005750:	464b      	mov	r3, r9
 8005752:	eb45 0303 	adc.w	r3, r5, r3
 8005756:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800575a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005766:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800576a:	f04f 0200 	mov.w	r2, #0
 800576e:	f04f 0300 	mov.w	r3, #0
 8005772:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005776:	4629      	mov	r1, r5
 8005778:	008b      	lsls	r3, r1, #2
 800577a:	4621      	mov	r1, r4
 800577c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005780:	4621      	mov	r1, r4
 8005782:	008a      	lsls	r2, r1, #2
 8005784:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005788:	f7fb f944 	bl	8000a14 <__aeabi_uldivmod>
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	4b60      	ldr	r3, [pc, #384]	; (8005914 <UART_SetConfig+0x4e4>)
 8005792:	fba3 2302 	umull	r2, r3, r3, r2
 8005796:	095b      	lsrs	r3, r3, #5
 8005798:	011c      	lsls	r4, r3, #4
 800579a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800579e:	2200      	movs	r2, #0
 80057a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80057a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80057a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80057ac:	4642      	mov	r2, r8
 80057ae:	464b      	mov	r3, r9
 80057b0:	1891      	adds	r1, r2, r2
 80057b2:	61b9      	str	r1, [r7, #24]
 80057b4:	415b      	adcs	r3, r3
 80057b6:	61fb      	str	r3, [r7, #28]
 80057b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057bc:	4641      	mov	r1, r8
 80057be:	1851      	adds	r1, r2, r1
 80057c0:	6139      	str	r1, [r7, #16]
 80057c2:	4649      	mov	r1, r9
 80057c4:	414b      	adcs	r3, r1
 80057c6:	617b      	str	r3, [r7, #20]
 80057c8:	f04f 0200 	mov.w	r2, #0
 80057cc:	f04f 0300 	mov.w	r3, #0
 80057d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057d4:	4659      	mov	r1, fp
 80057d6:	00cb      	lsls	r3, r1, #3
 80057d8:	4651      	mov	r1, sl
 80057da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057de:	4651      	mov	r1, sl
 80057e0:	00ca      	lsls	r2, r1, #3
 80057e2:	4610      	mov	r0, r2
 80057e4:	4619      	mov	r1, r3
 80057e6:	4603      	mov	r3, r0
 80057e8:	4642      	mov	r2, r8
 80057ea:	189b      	adds	r3, r3, r2
 80057ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057f0:	464b      	mov	r3, r9
 80057f2:	460a      	mov	r2, r1
 80057f4:	eb42 0303 	adc.w	r3, r2, r3
 80057f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80057fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	67bb      	str	r3, [r7, #120]	; 0x78
 8005806:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005808:	f04f 0200 	mov.w	r2, #0
 800580c:	f04f 0300 	mov.w	r3, #0
 8005810:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005814:	4649      	mov	r1, r9
 8005816:	008b      	lsls	r3, r1, #2
 8005818:	4641      	mov	r1, r8
 800581a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800581e:	4641      	mov	r1, r8
 8005820:	008a      	lsls	r2, r1, #2
 8005822:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005826:	f7fb f8f5 	bl	8000a14 <__aeabi_uldivmod>
 800582a:	4602      	mov	r2, r0
 800582c:	460b      	mov	r3, r1
 800582e:	4b39      	ldr	r3, [pc, #228]	; (8005914 <UART_SetConfig+0x4e4>)
 8005830:	fba3 1302 	umull	r1, r3, r3, r2
 8005834:	095b      	lsrs	r3, r3, #5
 8005836:	2164      	movs	r1, #100	; 0x64
 8005838:	fb01 f303 	mul.w	r3, r1, r3
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	011b      	lsls	r3, r3, #4
 8005840:	3332      	adds	r3, #50	; 0x32
 8005842:	4a34      	ldr	r2, [pc, #208]	; (8005914 <UART_SetConfig+0x4e4>)
 8005844:	fba2 2303 	umull	r2, r3, r2, r3
 8005848:	095b      	lsrs	r3, r3, #5
 800584a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800584e:	441c      	add	r4, r3
 8005850:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005854:	2200      	movs	r2, #0
 8005856:	673b      	str	r3, [r7, #112]	; 0x70
 8005858:	677a      	str	r2, [r7, #116]	; 0x74
 800585a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800585e:	4642      	mov	r2, r8
 8005860:	464b      	mov	r3, r9
 8005862:	1891      	adds	r1, r2, r2
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	415b      	adcs	r3, r3
 8005868:	60fb      	str	r3, [r7, #12]
 800586a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800586e:	4641      	mov	r1, r8
 8005870:	1851      	adds	r1, r2, r1
 8005872:	6039      	str	r1, [r7, #0]
 8005874:	4649      	mov	r1, r9
 8005876:	414b      	adcs	r3, r1
 8005878:	607b      	str	r3, [r7, #4]
 800587a:	f04f 0200 	mov.w	r2, #0
 800587e:	f04f 0300 	mov.w	r3, #0
 8005882:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005886:	4659      	mov	r1, fp
 8005888:	00cb      	lsls	r3, r1, #3
 800588a:	4651      	mov	r1, sl
 800588c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005890:	4651      	mov	r1, sl
 8005892:	00ca      	lsls	r2, r1, #3
 8005894:	4610      	mov	r0, r2
 8005896:	4619      	mov	r1, r3
 8005898:	4603      	mov	r3, r0
 800589a:	4642      	mov	r2, r8
 800589c:	189b      	adds	r3, r3, r2
 800589e:	66bb      	str	r3, [r7, #104]	; 0x68
 80058a0:	464b      	mov	r3, r9
 80058a2:	460a      	mov	r2, r1
 80058a4:	eb42 0303 	adc.w	r3, r2, r3
 80058a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	663b      	str	r3, [r7, #96]	; 0x60
 80058b4:	667a      	str	r2, [r7, #100]	; 0x64
 80058b6:	f04f 0200 	mov.w	r2, #0
 80058ba:	f04f 0300 	mov.w	r3, #0
 80058be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80058c2:	4649      	mov	r1, r9
 80058c4:	008b      	lsls	r3, r1, #2
 80058c6:	4641      	mov	r1, r8
 80058c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058cc:	4641      	mov	r1, r8
 80058ce:	008a      	lsls	r2, r1, #2
 80058d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80058d4:	f7fb f89e 	bl	8000a14 <__aeabi_uldivmod>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4b0d      	ldr	r3, [pc, #52]	; (8005914 <UART_SetConfig+0x4e4>)
 80058de:	fba3 1302 	umull	r1, r3, r3, r2
 80058e2:	095b      	lsrs	r3, r3, #5
 80058e4:	2164      	movs	r1, #100	; 0x64
 80058e6:	fb01 f303 	mul.w	r3, r1, r3
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	011b      	lsls	r3, r3, #4
 80058ee:	3332      	adds	r3, #50	; 0x32
 80058f0:	4a08      	ldr	r2, [pc, #32]	; (8005914 <UART_SetConfig+0x4e4>)
 80058f2:	fba2 2303 	umull	r2, r3, r2, r3
 80058f6:	095b      	lsrs	r3, r3, #5
 80058f8:	f003 020f 	and.w	r2, r3, #15
 80058fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4422      	add	r2, r4
 8005904:	609a      	str	r2, [r3, #8]
}
 8005906:	bf00      	nop
 8005908:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800590c:	46bd      	mov	sp, r7
 800590e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005912:	bf00      	nop
 8005914:	51eb851f 	.word	0x51eb851f

08005918 <__errno>:
 8005918:	4b01      	ldr	r3, [pc, #4]	; (8005920 <__errno+0x8>)
 800591a:	6818      	ldr	r0, [r3, #0]
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	20000014 	.word	0x20000014

08005924 <__libc_init_array>:
 8005924:	b570      	push	{r4, r5, r6, lr}
 8005926:	4d0d      	ldr	r5, [pc, #52]	; (800595c <__libc_init_array+0x38>)
 8005928:	4c0d      	ldr	r4, [pc, #52]	; (8005960 <__libc_init_array+0x3c>)
 800592a:	1b64      	subs	r4, r4, r5
 800592c:	10a4      	asrs	r4, r4, #2
 800592e:	2600      	movs	r6, #0
 8005930:	42a6      	cmp	r6, r4
 8005932:	d109      	bne.n	8005948 <__libc_init_array+0x24>
 8005934:	4d0b      	ldr	r5, [pc, #44]	; (8005964 <__libc_init_array+0x40>)
 8005936:	4c0c      	ldr	r4, [pc, #48]	; (8005968 <__libc_init_array+0x44>)
 8005938:	f000 f93c 	bl	8005bb4 <_init>
 800593c:	1b64      	subs	r4, r4, r5
 800593e:	10a4      	asrs	r4, r4, #2
 8005940:	2600      	movs	r6, #0
 8005942:	42a6      	cmp	r6, r4
 8005944:	d105      	bne.n	8005952 <__libc_init_array+0x2e>
 8005946:	bd70      	pop	{r4, r5, r6, pc}
 8005948:	f855 3b04 	ldr.w	r3, [r5], #4
 800594c:	4798      	blx	r3
 800594e:	3601      	adds	r6, #1
 8005950:	e7ee      	b.n	8005930 <__libc_init_array+0xc>
 8005952:	f855 3b04 	ldr.w	r3, [r5], #4
 8005956:	4798      	blx	r3
 8005958:	3601      	adds	r6, #1
 800595a:	e7f2      	b.n	8005942 <__libc_init_array+0x1e>
 800595c:	08005c34 	.word	0x08005c34
 8005960:	08005c34 	.word	0x08005c34
 8005964:	08005c34 	.word	0x08005c34
 8005968:	08005c38 	.word	0x08005c38

0800596c <malloc>:
 800596c:	4b02      	ldr	r3, [pc, #8]	; (8005978 <malloc+0xc>)
 800596e:	4601      	mov	r1, r0
 8005970:	6818      	ldr	r0, [r3, #0]
 8005972:	f000 b88d 	b.w	8005a90 <_malloc_r>
 8005976:	bf00      	nop
 8005978:	20000014 	.word	0x20000014

0800597c <free>:
 800597c:	4b02      	ldr	r3, [pc, #8]	; (8005988 <free+0xc>)
 800597e:	4601      	mov	r1, r0
 8005980:	6818      	ldr	r0, [r3, #0]
 8005982:	f000 b819 	b.w	80059b8 <_free_r>
 8005986:	bf00      	nop
 8005988:	20000014 	.word	0x20000014

0800598c <memcpy>:
 800598c:	440a      	add	r2, r1
 800598e:	4291      	cmp	r1, r2
 8005990:	f100 33ff 	add.w	r3, r0, #4294967295
 8005994:	d100      	bne.n	8005998 <memcpy+0xc>
 8005996:	4770      	bx	lr
 8005998:	b510      	push	{r4, lr}
 800599a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800599e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059a2:	4291      	cmp	r1, r2
 80059a4:	d1f9      	bne.n	800599a <memcpy+0xe>
 80059a6:	bd10      	pop	{r4, pc}

080059a8 <memset>:
 80059a8:	4402      	add	r2, r0
 80059aa:	4603      	mov	r3, r0
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d100      	bne.n	80059b2 <memset+0xa>
 80059b0:	4770      	bx	lr
 80059b2:	f803 1b01 	strb.w	r1, [r3], #1
 80059b6:	e7f9      	b.n	80059ac <memset+0x4>

080059b8 <_free_r>:
 80059b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059ba:	2900      	cmp	r1, #0
 80059bc:	d044      	beq.n	8005a48 <_free_r+0x90>
 80059be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059c2:	9001      	str	r0, [sp, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f1a1 0404 	sub.w	r4, r1, #4
 80059ca:	bfb8      	it	lt
 80059cc:	18e4      	addlt	r4, r4, r3
 80059ce:	f000 f8e3 	bl	8005b98 <__malloc_lock>
 80059d2:	4a1e      	ldr	r2, [pc, #120]	; (8005a4c <_free_r+0x94>)
 80059d4:	9801      	ldr	r0, [sp, #4]
 80059d6:	6813      	ldr	r3, [r2, #0]
 80059d8:	b933      	cbnz	r3, 80059e8 <_free_r+0x30>
 80059da:	6063      	str	r3, [r4, #4]
 80059dc:	6014      	str	r4, [r2, #0]
 80059de:	b003      	add	sp, #12
 80059e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059e4:	f000 b8de 	b.w	8005ba4 <__malloc_unlock>
 80059e8:	42a3      	cmp	r3, r4
 80059ea:	d908      	bls.n	80059fe <_free_r+0x46>
 80059ec:	6825      	ldr	r5, [r4, #0]
 80059ee:	1961      	adds	r1, r4, r5
 80059f0:	428b      	cmp	r3, r1
 80059f2:	bf01      	itttt	eq
 80059f4:	6819      	ldreq	r1, [r3, #0]
 80059f6:	685b      	ldreq	r3, [r3, #4]
 80059f8:	1949      	addeq	r1, r1, r5
 80059fa:	6021      	streq	r1, [r4, #0]
 80059fc:	e7ed      	b.n	80059da <_free_r+0x22>
 80059fe:	461a      	mov	r2, r3
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	b10b      	cbz	r3, 8005a08 <_free_r+0x50>
 8005a04:	42a3      	cmp	r3, r4
 8005a06:	d9fa      	bls.n	80059fe <_free_r+0x46>
 8005a08:	6811      	ldr	r1, [r2, #0]
 8005a0a:	1855      	adds	r5, r2, r1
 8005a0c:	42a5      	cmp	r5, r4
 8005a0e:	d10b      	bne.n	8005a28 <_free_r+0x70>
 8005a10:	6824      	ldr	r4, [r4, #0]
 8005a12:	4421      	add	r1, r4
 8005a14:	1854      	adds	r4, r2, r1
 8005a16:	42a3      	cmp	r3, r4
 8005a18:	6011      	str	r1, [r2, #0]
 8005a1a:	d1e0      	bne.n	80059de <_free_r+0x26>
 8005a1c:	681c      	ldr	r4, [r3, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	6053      	str	r3, [r2, #4]
 8005a22:	4421      	add	r1, r4
 8005a24:	6011      	str	r1, [r2, #0]
 8005a26:	e7da      	b.n	80059de <_free_r+0x26>
 8005a28:	d902      	bls.n	8005a30 <_free_r+0x78>
 8005a2a:	230c      	movs	r3, #12
 8005a2c:	6003      	str	r3, [r0, #0]
 8005a2e:	e7d6      	b.n	80059de <_free_r+0x26>
 8005a30:	6825      	ldr	r5, [r4, #0]
 8005a32:	1961      	adds	r1, r4, r5
 8005a34:	428b      	cmp	r3, r1
 8005a36:	bf04      	itt	eq
 8005a38:	6819      	ldreq	r1, [r3, #0]
 8005a3a:	685b      	ldreq	r3, [r3, #4]
 8005a3c:	6063      	str	r3, [r4, #4]
 8005a3e:	bf04      	itt	eq
 8005a40:	1949      	addeq	r1, r1, r5
 8005a42:	6021      	streq	r1, [r4, #0]
 8005a44:	6054      	str	r4, [r2, #4]
 8005a46:	e7ca      	b.n	80059de <_free_r+0x26>
 8005a48:	b003      	add	sp, #12
 8005a4a:	bd30      	pop	{r4, r5, pc}
 8005a4c:	200002a8 	.word	0x200002a8

08005a50 <sbrk_aligned>:
 8005a50:	b570      	push	{r4, r5, r6, lr}
 8005a52:	4e0e      	ldr	r6, [pc, #56]	; (8005a8c <sbrk_aligned+0x3c>)
 8005a54:	460c      	mov	r4, r1
 8005a56:	6831      	ldr	r1, [r6, #0]
 8005a58:	4605      	mov	r5, r0
 8005a5a:	b911      	cbnz	r1, 8005a62 <sbrk_aligned+0x12>
 8005a5c:	f000 f88c 	bl	8005b78 <_sbrk_r>
 8005a60:	6030      	str	r0, [r6, #0]
 8005a62:	4621      	mov	r1, r4
 8005a64:	4628      	mov	r0, r5
 8005a66:	f000 f887 	bl	8005b78 <_sbrk_r>
 8005a6a:	1c43      	adds	r3, r0, #1
 8005a6c:	d00a      	beq.n	8005a84 <sbrk_aligned+0x34>
 8005a6e:	1cc4      	adds	r4, r0, #3
 8005a70:	f024 0403 	bic.w	r4, r4, #3
 8005a74:	42a0      	cmp	r0, r4
 8005a76:	d007      	beq.n	8005a88 <sbrk_aligned+0x38>
 8005a78:	1a21      	subs	r1, r4, r0
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	f000 f87c 	bl	8005b78 <_sbrk_r>
 8005a80:	3001      	adds	r0, #1
 8005a82:	d101      	bne.n	8005a88 <sbrk_aligned+0x38>
 8005a84:	f04f 34ff 	mov.w	r4, #4294967295
 8005a88:	4620      	mov	r0, r4
 8005a8a:	bd70      	pop	{r4, r5, r6, pc}
 8005a8c:	200002ac 	.word	0x200002ac

08005a90 <_malloc_r>:
 8005a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a94:	1ccd      	adds	r5, r1, #3
 8005a96:	f025 0503 	bic.w	r5, r5, #3
 8005a9a:	3508      	adds	r5, #8
 8005a9c:	2d0c      	cmp	r5, #12
 8005a9e:	bf38      	it	cc
 8005aa0:	250c      	movcc	r5, #12
 8005aa2:	2d00      	cmp	r5, #0
 8005aa4:	4607      	mov	r7, r0
 8005aa6:	db01      	blt.n	8005aac <_malloc_r+0x1c>
 8005aa8:	42a9      	cmp	r1, r5
 8005aaa:	d905      	bls.n	8005ab8 <_malloc_r+0x28>
 8005aac:	230c      	movs	r3, #12
 8005aae:	603b      	str	r3, [r7, #0]
 8005ab0:	2600      	movs	r6, #0
 8005ab2:	4630      	mov	r0, r6
 8005ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ab8:	4e2e      	ldr	r6, [pc, #184]	; (8005b74 <_malloc_r+0xe4>)
 8005aba:	f000 f86d 	bl	8005b98 <__malloc_lock>
 8005abe:	6833      	ldr	r3, [r6, #0]
 8005ac0:	461c      	mov	r4, r3
 8005ac2:	bb34      	cbnz	r4, 8005b12 <_malloc_r+0x82>
 8005ac4:	4629      	mov	r1, r5
 8005ac6:	4638      	mov	r0, r7
 8005ac8:	f7ff ffc2 	bl	8005a50 <sbrk_aligned>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	4604      	mov	r4, r0
 8005ad0:	d14d      	bne.n	8005b6e <_malloc_r+0xde>
 8005ad2:	6834      	ldr	r4, [r6, #0]
 8005ad4:	4626      	mov	r6, r4
 8005ad6:	2e00      	cmp	r6, #0
 8005ad8:	d140      	bne.n	8005b5c <_malloc_r+0xcc>
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	4631      	mov	r1, r6
 8005ade:	4638      	mov	r0, r7
 8005ae0:	eb04 0803 	add.w	r8, r4, r3
 8005ae4:	f000 f848 	bl	8005b78 <_sbrk_r>
 8005ae8:	4580      	cmp	r8, r0
 8005aea:	d13a      	bne.n	8005b62 <_malloc_r+0xd2>
 8005aec:	6821      	ldr	r1, [r4, #0]
 8005aee:	3503      	adds	r5, #3
 8005af0:	1a6d      	subs	r5, r5, r1
 8005af2:	f025 0503 	bic.w	r5, r5, #3
 8005af6:	3508      	adds	r5, #8
 8005af8:	2d0c      	cmp	r5, #12
 8005afa:	bf38      	it	cc
 8005afc:	250c      	movcc	r5, #12
 8005afe:	4629      	mov	r1, r5
 8005b00:	4638      	mov	r0, r7
 8005b02:	f7ff ffa5 	bl	8005a50 <sbrk_aligned>
 8005b06:	3001      	adds	r0, #1
 8005b08:	d02b      	beq.n	8005b62 <_malloc_r+0xd2>
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	442b      	add	r3, r5
 8005b0e:	6023      	str	r3, [r4, #0]
 8005b10:	e00e      	b.n	8005b30 <_malloc_r+0xa0>
 8005b12:	6822      	ldr	r2, [r4, #0]
 8005b14:	1b52      	subs	r2, r2, r5
 8005b16:	d41e      	bmi.n	8005b56 <_malloc_r+0xc6>
 8005b18:	2a0b      	cmp	r2, #11
 8005b1a:	d916      	bls.n	8005b4a <_malloc_r+0xba>
 8005b1c:	1961      	adds	r1, r4, r5
 8005b1e:	42a3      	cmp	r3, r4
 8005b20:	6025      	str	r5, [r4, #0]
 8005b22:	bf18      	it	ne
 8005b24:	6059      	strne	r1, [r3, #4]
 8005b26:	6863      	ldr	r3, [r4, #4]
 8005b28:	bf08      	it	eq
 8005b2a:	6031      	streq	r1, [r6, #0]
 8005b2c:	5162      	str	r2, [r4, r5]
 8005b2e:	604b      	str	r3, [r1, #4]
 8005b30:	4638      	mov	r0, r7
 8005b32:	f104 060b 	add.w	r6, r4, #11
 8005b36:	f000 f835 	bl	8005ba4 <__malloc_unlock>
 8005b3a:	f026 0607 	bic.w	r6, r6, #7
 8005b3e:	1d23      	adds	r3, r4, #4
 8005b40:	1af2      	subs	r2, r6, r3
 8005b42:	d0b6      	beq.n	8005ab2 <_malloc_r+0x22>
 8005b44:	1b9b      	subs	r3, r3, r6
 8005b46:	50a3      	str	r3, [r4, r2]
 8005b48:	e7b3      	b.n	8005ab2 <_malloc_r+0x22>
 8005b4a:	6862      	ldr	r2, [r4, #4]
 8005b4c:	42a3      	cmp	r3, r4
 8005b4e:	bf0c      	ite	eq
 8005b50:	6032      	streq	r2, [r6, #0]
 8005b52:	605a      	strne	r2, [r3, #4]
 8005b54:	e7ec      	b.n	8005b30 <_malloc_r+0xa0>
 8005b56:	4623      	mov	r3, r4
 8005b58:	6864      	ldr	r4, [r4, #4]
 8005b5a:	e7b2      	b.n	8005ac2 <_malloc_r+0x32>
 8005b5c:	4634      	mov	r4, r6
 8005b5e:	6876      	ldr	r6, [r6, #4]
 8005b60:	e7b9      	b.n	8005ad6 <_malloc_r+0x46>
 8005b62:	230c      	movs	r3, #12
 8005b64:	603b      	str	r3, [r7, #0]
 8005b66:	4638      	mov	r0, r7
 8005b68:	f000 f81c 	bl	8005ba4 <__malloc_unlock>
 8005b6c:	e7a1      	b.n	8005ab2 <_malloc_r+0x22>
 8005b6e:	6025      	str	r5, [r4, #0]
 8005b70:	e7de      	b.n	8005b30 <_malloc_r+0xa0>
 8005b72:	bf00      	nop
 8005b74:	200002a8 	.word	0x200002a8

08005b78 <_sbrk_r>:
 8005b78:	b538      	push	{r3, r4, r5, lr}
 8005b7a:	4d06      	ldr	r5, [pc, #24]	; (8005b94 <_sbrk_r+0x1c>)
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	4604      	mov	r4, r0
 8005b80:	4608      	mov	r0, r1
 8005b82:	602b      	str	r3, [r5, #0]
 8005b84:	f7fc fa28 	bl	8001fd8 <_sbrk>
 8005b88:	1c43      	adds	r3, r0, #1
 8005b8a:	d102      	bne.n	8005b92 <_sbrk_r+0x1a>
 8005b8c:	682b      	ldr	r3, [r5, #0]
 8005b8e:	b103      	cbz	r3, 8005b92 <_sbrk_r+0x1a>
 8005b90:	6023      	str	r3, [r4, #0]
 8005b92:	bd38      	pop	{r3, r4, r5, pc}
 8005b94:	200002b0 	.word	0x200002b0

08005b98 <__malloc_lock>:
 8005b98:	4801      	ldr	r0, [pc, #4]	; (8005ba0 <__malloc_lock+0x8>)
 8005b9a:	f000 b809 	b.w	8005bb0 <__retarget_lock_acquire_recursive>
 8005b9e:	bf00      	nop
 8005ba0:	200002b4 	.word	0x200002b4

08005ba4 <__malloc_unlock>:
 8005ba4:	4801      	ldr	r0, [pc, #4]	; (8005bac <__malloc_unlock+0x8>)
 8005ba6:	f000 b804 	b.w	8005bb2 <__retarget_lock_release_recursive>
 8005baa:	bf00      	nop
 8005bac:	200002b4 	.word	0x200002b4

08005bb0 <__retarget_lock_acquire_recursive>:
 8005bb0:	4770      	bx	lr

08005bb2 <__retarget_lock_release_recursive>:
 8005bb2:	4770      	bx	lr

08005bb4 <_init>:
 8005bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb6:	bf00      	nop
 8005bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bba:	bc08      	pop	{r3}
 8005bbc:	469e      	mov	lr, r3
 8005bbe:	4770      	bx	lr

08005bc0 <_fini>:
 8005bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc2:	bf00      	nop
 8005bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bc6:	bc08      	pop	{r3}
 8005bc8:	469e      	mov	lr, r3
 8005bca:	4770      	bx	lr
